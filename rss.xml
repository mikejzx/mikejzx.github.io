<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<atom:link href="https://mikejzx.github.io/rss.xml" rel="self" type="application/rss+xml" />
<title>Mike Skec's Blog</title>
<description>RSS feed for Michael's blog!</description>
<link>https://mikejzx.github.io/</link>
<lastBuildDate>Fri, 22 Jan 2021 12:26:24 +1100</lastBuildDate>

<item>
<guid>https://mikejzx.github.io/blog/2021/gentoo-on-the-x205ta.html</guid>
<link>https://mikejzx.github.io/blog/2021/gentoo-on-the-x205ta.html</link>
<pubDate>Thu, 14 Jan 2021 07:44:57 +1100</pubDate>
<title>Gentoo on the X205TA</title>
<description><![CDATA[

<h1 id="Gentoo%20on%20the%20X205TA">Gentoo on the X205TA</h1>


<p>I&#39;ve had an ASUS X205TA for a few years now, and installed Lubuntu on it initially, as it was practically unusable with Windows 10 after installing a few programs. Lubuntu was great and all for me while I was just starting to use to Linux more often, and it worked fine for doing schoolwork. Just recently I felt like it was time to do a clean install of something on there. I was initially thinking of going with Arch, but I figured I&#39;d get a bit adventurous and try something different (already running Arch on two other machines). I thought, &#8220;Maybe I should try out Gentoo!&#8221; This was my first time installing Gentoo - it was also probably the most painful Linux install I&#39;ve ever put myself through! (not because of Gentoo, but because of the device hardware).</p>

<p>If you&#39;ve done any searching online for guides or helpers on installing Gentoo specifically on this laptop, you&#39;ve probably realised already that there&#39;s almost no information whatsoever. You can find info for other distros which doesn&#39;t all apply since there&#39;s so much manual work required in a Gentoo installation. There&#39;s one article by <a href="https://blanktar.jp/blog/2015/02/gentoo-into-eeebook">some Japanese guy</a> which when translated has some useful stuff in it. The guy was close to getting it to work on his X205TA, but ran into the same issues that I did; kernel panics while booting, and an unusable keyboard when it actually did boot. After hours of tweaking with the kernel configuration, I managed to get the system to run real nicely. I still haven&#39;t run into any issues, freezes or anything, which is great!</p>

<p>I thought I&#39;d write this little guide to help any of the other people pulling their hair out trying to install Gentoo on this system. This is not a &#8220;full installation&#8221;, but instead a set of <strong>extra&#47;notable steps</strong> that need to be taken on this device. I&#39;d recommend having this guide on the side as you follow the official guide.</p>

<p>Let me just warn you now - compilation of large packages on this device will usually take quite a while. If I were you I&#39;d definitely try avoiding installing any massive desktop environments, and instead take a minimal approach, with a standalone window manager, etc.</p>

<p>Oh, and a little disclaimer: do this at your own risk. I&#39;m not at fault if you screw up your laptop!</p>

<h2 id="Getting%20started">Getting started</h2>

<p>If you&#39;ve installed Linux on an X205TA before, you&#39;re probably already aware that the device has a 64-bit CPU, and must have an exclusively 32-bit bootloader (if you didn&#39;t know that before you&#39;re probably wondering why this is the case; the reason is actually because ASUS are a pack of idiots). Gentoo&#39;s Live 64-bit CD ISO already comes with a 32-bit bootloader on it, so you&#39;re able to just burn it to a USB stick, plug it in, and boot right into the live environment.</p>

<p>Wi-fi should work out of the box. Hop into <code>wpa_supplicant</code> and get yourself connected. If for whatever reason you cannot connect, try run <code>modprobe brcmfmac</code> to manually load the Wi-fi module.</p>

<h2 id="Partitioning">Partitioning</h2>

<p>The X205TA uses an eMMC as it&#39;s storage device (basically an SD card). Linux identifies it as <code>&#47;dev&#47;mmcblkX</code> and its partitions as <code>&#47;dev&#47;mmcblkpXpX</code>.</p>

<p>I partitioned my drives as shown below using <code>parted</code>:</p>

<pre><code>NAME          SIZE   MOUNTPOINT
mmcblk1
  mmcblk1p1   130M   &#47;boot&#47;EFI
  mmcblk1p2    29G   &#47;
</code></pre>

<p>Since this is a UEFI system, we need to create an ESP (EFI System Partition), which is <code>mmcblk1p1</code> in my case. Make sure you also <strong>set the ESP to be bootable</strong>! It should have both the &#8216;boot&#8217; and &#8216;esp&#8217; flags when you run the print command in <code>parted</code>.</p>

<p>If your <code>lsblk</code> output includes a bunch of other block devices, like <code>mmcblk1boot0</code> or something, just ignore them. I didn&#39;t use these at all and had no idea where they came from honestly. You might be able to delete them if you want.</p>

<p>You can optionally create a separate <code>&#47;boot</code> partition if you want. I decided not to do this just to keep shit simple.</p>

<p><strong>Note</strong>: the X205TA only has 2 GiB of RAM onboard. <strong>You will need some kind of swap space on the system</strong> to compile some of the larger packages or else you will run out of RAM and <code>emerge</code> will abort the compilation process (happened to me twice while compiling <code>gcc</code>). You can create a swap partition if you like. I personally created a 2 GiB swapfile, however you can use as much as you like.</p>

<p>As for filesystems. The ESP must also be formatted as a FAT filesystem, so:</p>

<pre><code>mkfs.fat -F 32 &#47;dev&#47;mmcblk1p1
</code></pre>

<p>You can of course use EXT4 for your root partition.</p>

<p>Make sure that you <code>mount</code> all the partitions and <code>swapon</code> your swap space when you <code>chroot</code> into the system (use the method provided in the install guide). If you&#39;re partitioning the same way as me, make sure you use the same mount points I specified above.</p>

<h2 id="Setting%20up%20the%20make.conf">Setting up the make.conf</h2>

<p>You should be able to get away with using <code>MAKEOPTS="-j3"</code> for building most of the packages on the system (be careful when compiling large packages like <code>gcc</code> though. If you have too many jobs then you will end up writing a lot to swap instead of RAM which will make compilation very slow).</p>

<p>Other things you will want to put in your make.conf:</p>

<pre><code># &#39;synaptics&#39; is for touchpad support
INPUT_DEVICES="libinput synaptics"

# X205TA has Intel graphics onboard
VIDEO_CARDS="intel i965"
</code></pre>

<p>You can also add the following CPU flags to it, I generated these using <code>cpuid2cpuflags</code>. If you want to be absolutely certain that these are correct for your hardware, emerge <code>cpuid2cpuflags</code> and run it yourself.</p>

<pre><code>CPU_FLAGS_X86="aes mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4_2 ssse3"
</code></pre>

<p>Finally, and this is probably one of the most important settings; like I mentioned earlier, the X205TA has an exclusively 32-bit bootloader. Make sure you put this in your make.conf if you want your machine to boot:</p>

<pre><code>GRUB_PLATFORMS="efi-32"
</code></pre>

<h2 id="Kernel%20configuration">Kernel configuration</h2>

<p>Okay. This is another important part; it&#39;s also where it gets pretty messy. There are a bunch of kernel options that must be included in order for your system to function properly. These should be all the important ones. If you think anything is missing, feel free to contact me and I&#39;ll correct it. I&#39;ve also probably included more options than necessary here - I don&#39;t really have the time to test every option individually, so I just went with whatever worked. If you think any of the options are completely unnecessary, just let me know and I&#39;ll remove it from here.</p>

<p>If you don&#39;t want to configure your kernel yourself (or if you can&#39;t get your system to work properly), you can try <a href="files/x205ta-kernel.config.gz">using my config instead</a> (no sound support), given that you are also running something around kernel 5.4.80.</p>

<h3 id="eMMC%20support">eMMC support</h3>

<p>Make sure you&#39;ve got all of these in your config, or else you will get kernel panics at boot time.</p>

<pre><code>Device Drivers
  MMC&#47;SD&#47;SDIO card support
    &#60;*&#62; MMC block device driver
    &#60;*&#62; Secure Digital Host Controller Interface support
    &#60;*&#62;   SDHCI support on PCI bus
    [*]     Ricoh MMC Controller Disabler
    &#60;*&#62;   SDHCI support for ACPI enumerated SDHCI controllers
    &#60;*&#62;   SDHCI platform and OF driver helper
    &#60;*&#62; MMC&#47;SD driver for Ricoh Bay1Controllers
</code></pre>

<h3 id="Pin%20Controller">Pin Controller</h3>

<pre><code>Device Drivers
  Pin controllers
    [*] Intel Baytrail GPIO pin control
    [*] Intel Cherryview&#47;Braswell pinctrl and GPIO driver
</code></pre>

<h3 id="Wi-fi">Wi-fi</h3>

<p>Thanks to the Japanese guy I mentioned earlier for mentioning these options. However we also need to include the WLAN driver so we can enable the <code>wlan0</code> interface. (Note that these are in addition to the other base options that you&#39;d normally use for networking)</p>

<pre><code>Device Drivers
  Wireless LAN
    [*] Broadcom devices
    &#60;M&#62;   Broadcom 43xx wireless support (mac80211 stack)
    [*]   Broadcom 43xx SDIO device support
    &#60;M&#62;   Broadcom FullMAC WLAN driver
    [*]   SDIO bus interface support for FullMAC driver

Networking Support
  &#60;M&#62; cfg80211 - wireless configuration API
  [*]   enable powersave by default
  [*]   cfg80211 wireless extensions compatibility
  &#60;M&#62; Generic IEEE 802.11 Networking Stack (mac80211)
  [*] Export mac80211 internals in DebugFS
</code></pre>

<h3 id="Input">Input</h3>

<p>The following need to be built into the kernel to get the keyboard working. Thanks to <a href="https://ubuntuforums.org/showthread.php?t=2254322&amp;p=13733677#post13733677">harryharryharry over at Ubuntu forums</a> for mentioning the I2C stuff (and for all of his contributions to getting Linux working on this laptop!)</p>

<pre><code>Device Drivers
  HID support
    I2C HID support
      &#60;*&#62; HID over I2C transport layer
  I2C support
    I2C Hardware Bus Support
      &#60;*&#62; Synopsys DesignWare Platform
      [*]   Synopsys DesignWare Slave
      &#60;*&#62; Synopsys DesignWare PCI
      [*] Intel Baytrail I2C semaphore support

  Input device support
    &#60;M&#62; Mouse interface
    &#60;M&#62; Event interface
    [*] Keyboards
    &#60;M&#62;   (basically all keyboards)
    [*] Mice
    &#60;M&#62;   ELAN I2C Touchpad support
    [*]     Enable I2C support
    [*]     Enable SMbus support
    &#60;*&#62;   Synaptics I2C Touchpad support
</code></pre>

<h3 id="Graphics">Graphics</h3>

<pre><code>Device Drivers
  Graphics support
    &#60;*&#62; Intel 8xx&#47;9xx&#47;G3x&#47;G4x&#47;HD Graphics
    [*] Enable capturing GPU state following a hang.
    [*]   Compress GPU error state
    [*] Always enable userptr support
</code></pre>

<h3 id="Sound">Sound</h3>

<p>I&#39;m adding this section after the original post date (currently 2020-01-22). I haven&#39;t tried getting sound working on the 5.4 kernel, as I&#39;m now running the latest stable 5.10.9 kernel. You can try reproduce the settings below on an older kernel, I don&#39;t know if it&#39;ll work though.</p>

<p>These should be all the options you need to get the sound working decently. There will be just a slight hiss in the headphone output but I&#39;m sure you can live with that. Oh, and you will also need to manually switch the output from Headphones to Speakers and vice-versa, using e.g pavucontrol. You could probably set up some kind of output-toggle binding to speed up that process.</p>

<pre><code>Device Drivers
  &#60;*&#62; Sound card support
    &#60;*&#62; ALSA
      [*] PCI sound devices
      &#60;M&#62; HR-timer backend support
          HD-Audio
          &#60;M&#62; HD Audio PCI
          [*] Build hwdep interface for HD-audio driver
          [*] Support initialization patch loading for HD-audio
          &#60;M&#62; Build Realtek HD-audio codec support
          &#60;M&#62; Build Analog devices HD-audio codec support
      (4096) Pre-allocated buffer size for HD-audio driver
      &#60;*&#62; ALSA for SoC audio support
        [*] Intel ASoC SST drivers
        &#60;*&#62;   ACPI HiFi2 (Baytrail, Cherrytrail) Platforms
        -*- Intel Machine Drivers
          &#60;M&#62; (everything)
        [*] Sound Open Firmware Support
          &#60;*&#62; SOF ACPI enumeration support.
          [*] SOF support for Intel audio DSPs
        &#60;M&#62; ASoC Simple sound card support
</code></pre>

<p>I have no idea if the microphone will work with these options. I don&#39;t really care since I don&#39;t use the microphone.</p>

<p>And from here all the other kernel options (USB support, etc) should be pretty generic and obvious.</p>

<h3 id="Kernel%20patches">Kernel patches</h3>

<p>If you want to squeeze as much performance as possible out of your X205TA, you can apply the <a href="http://ck.kolivas.org/patches"><code>linux-ck</code> performance patches</a> to your kernel. I&#39;m running this personally and it seems to just make the system feel a bit snappier overall.</p>

<h2 id="GRUB%20installation">GRUB installation</h2>

<p>To install GRUB we have to run these two commands. Make sure you <strong>do not</strong> include a partition number in the <code>grub-install</code> command (e.g <strong>don&#39;t use</strong> <code>mmcblk1pX</code>) or else your laptop won&#39;t boot (at least in my testing). As long as the <code>&#47;boot&#47;EFI</code> directory exists (and you&#39;ve formatted partitions the same as me), the below commands will install the bootloader just fine.</p>

<pre><code>grub-install --target=i386-efi &#47;dev&#47;mmcblk1
grub-mkconfig -o &#47;boot&#47;grub&#47;grub.cfg

</code></pre>

<p>Your bootloader should now appear in <code>&#47;boot&#47;EFI&#47;EFI&#47;gentoo</code>. It probably looks weird with the two EFI directories, but it seems to work perfectly like this.</p>

<p>I also created an initramfs. I&#39;d say you should probably install one of these too on your machine:</p>

<pre><code>genkernel --install --kernel-config=&#47;usr&#47;src&#47;linux&#47;.config initramfs
</code></pre>

<h2 id="Finishing%20up">Finishing up</h2>

<p>And that&#39;s about it! If all went well - you followed the official install Gentoo instructions and applied the stuff from this guide, you should hopefully be able to unmount everything, reboot, and boot into a fresh Gentoo installation on your ASUS X205TA! You&#39;re on your own from here to decide how the rest of your system will be laid out.</p>

<p>If you have any questions, comments, or problems with the information here, please feel free to e-mail me via the address on my <a href="https://mikejzx.github.io">homepage</a>.</p>

<p>Have fun waiting for all your packages to compile ;)</p>

]]></description>
</item>

<item>
<guid>https://mikejzx.github.io/blog/2021/now-on-gemini.html</guid>
<link>https://mikejzx.github.io/blog/2021/now-on-gemini.html</link>
<pubDate>Tue, 05 Jan 2021 15:12:16 +1100</pubDate>
<title>Now on Gemini!</title>
<description><![CDATA[

<h1 id="Now%20on%20Gemini!">Now on Gemini!</h1>


<p>Just thought I&#39;d announce that my content is now accessible in geminispace!</p>

<p>Check it out: <a href="gemini://tilde.pink/%7Emike">gemini:&#47;&#47;tilde.pink&#47;~mike</a></p>

<p>I&#39;ve been playing around a bit recently with Gemini, and have been contributing a whole lot to a Gemini browser project called <a href="https://github.com/MasterQ32/kristall.git">Kristall</a>. I&#39;ve come to actually really like the protocol, and I&#39;m surprised at how many people have content over there.</p>

<p>Thanks to <a href="gemini://tilde.pink">tilde.pink</a> for the free shell access!</p>

<p>I should mention that my posts in geminispace are automatically converted from Markdown to Gemtext using a script I wrote. The script is a bit messy and isn&#39;t very useful unless your site setup is exactly like mine, so I won&#39;t be releasing the script anywhere currently, unless of course a lot of people request it or something.</p>

<p>If you&#39;d like to learn more about what Gemini is, be sure to check the main <a href="https://gemini.circumlunar.space">project page</a>. Be sure to access the Gemini version of their page if you&#39;d like to read more, as only a small portion of their content is available via HTTP&#47;S.</p>

]]></description>
</item>

<item>
<guid>https://mikejzx.github.io/blog/2020/on-web-browsers.html</guid>
<link>https://mikejzx.github.io/blog/2020/on-web-browsers.html</link>
<pubDate>Sat, 12 Dec 2020 17:31:30 +1100</pubDate>
<title>On Web Browsers</title>
<description><![CDATA[

<h1 id="On%20Web%20Browsers">On Web Browsers</h1>


<p>In the current day and age, there are only two main browsers that you will find on the desktop. Chrome and Firefox. We&#39;ll ignore Safari because nobody cares about Apple. According to StatCounter as of November 2020, Chrome has nearly 70% of the web browser market share on desktop. Add in Edge&#39;s 8% and Opera&#39;s 2% and you can say that about 80% of desktop web browsers are Chromium-based.</p>

<p>On that note, it seems like few people these days (i.e normies) are aware that Chrome is a proprietary fork of the open-source Chromium browser. I mean, if you seriously have to use Chrome, at least switch to Chromium for god&#39;s sake, or better, one of it&#39;s decent free and open-source forks: &#8216;ungoogled-chromium&#8217;, Brave, Bromite, Iridium, etc. Nevertheless, that&#39;s a whole other topic.</p>

<p>What I actually wanted to discuss here is the lack of choice in web browsers we have right now. If you&#39;re not using a Chromium-based browser, you&#39;re most likely going to be using Mozilla&#39;s Firefox. (Yes, I know there are small free and open-source alternatives, like suckless&#39;s &#8216;surf&#8217; browser, &#8216;qutebrowser&#8217;, etc, but these are mostly used by and intended for power users&#47;nerds running Linux, not average users).</p>

<p>The thing is, Firefox is slowly turning to shit. I&#39;ve been using it for a few years now and was initially reasonably happy with it. I mean, it took some configuring to get it to behave how I wanted (no history, delete cookies, and some other &#8220;hardening&#8221;). Nevertheless, I&#39;ve noticed that as the years go by, Firefox just seems to get worse and worse. I really don&#39;t know what the hell is going on over there at Mozilla, but adding useless features that nobody uses, like Pocket, and forcing a stupid expanding URL bar that nobody asked for is just a few of the many things that are slowly turning our browser into rubbish. You&#39;ll find many people complaining online about how a feature they liked was removed, or how they can&#39;t stand a new feature. These people will either get told to &#8220;deal with it&#8221;, or perform some ridiculous workaround that wouldn&#39;t be necessary if Mozilla had focused their effort on actually making the browser better.</p>

<p>And the funniest part is simply that Firefox is a <strong>free and open-source browser</strong>. One of the few criterion for a piece of software to be free and open-source is the ability for anyone to come along and modify its source code. There&#39;s almost a joke online regarding FOSS projects - when someone says they don&#39;t like a particular feature in a piece of open-source software, they&#39;ll get told, &#8220;fork it&#8221;.</p>

<p>Now here is the problem, and it&#39;s a big one; 99% of the people who look at the source code of a large web browser will be <strong>unable to modify it</strong>, to fix the problems in the browser. There&#39;s only so many people who are willing to put the work and dedication into understanding any of a huge web browser&#39;s source code. You&#39;re not going to have many hobbyists coming along and fixing the problems with Firefox just out of goodwill in their free time.</p>

<p>I should add. I am aware of Alex Kontos (a.k.a MrAlex94) and his browser Waterfox, and I actually used Waterfox for most of this year. Sure, he&#39;s done some excellent work removing Pocket (thank god), telemetry, and bringing back the old plugin system, but apart from that, I feel like the browser is still <strong>too similar</strong> to Firefox. I wish that the browser would go off more on it&#39;s own path and do it&#39;s own thing. But of course, I can&#39;t blame the dude, for reasons that I&#39;m going to get to. I&#39;d imagine that him being mostly a one-man-army would make it incredibly difficult to do something like that too.</p>

<p>And so, the only two big browsers that are still alive today on the desktop, Chromium and Firefox, simply managed to survive today because they have companies backing them paying people to work on them. These browsers are continually getting bigger, bigger, and bigger, and it has just about gotten to the point where writing a new web browser from scratch which can compete with Chromium and Firefox would demand an insane amount of resources.</p>

<p>So you might be asking yourself. Well, what do we do? Unfortunately, I don&#39;t have an answer to that. But I can tell you why we&#39;re in this ridiculous situation:</p>

<p>The web itself has become an absolute mess.</p>

<p>Think about it. The reason why our browsers are so gigantic, is because of the current state of the web. We need a massive CSS engine to let developers make sites look pretty. We need an equally massive JavaScript engine to implement the entire JavaScript standard. We need to support all these WebSockets, other APIs, and so on. In the end, after 10-20 years of all of this crap being thrown into web browsers, you get the big, bloated, web browsers we have today that hog 8+ processes, and a few gigs of RAM.</p>

<p>The problem is that we&#39;ve made <strong>too much</strong> possible for web developers. There&#39;s a bit of a continuum actually, either:</p>

<ul>
<li><p>You give web developers the ability to do practically anything they want (as is the case currently), through loads of CSS rules, and JavaScript. This results in our current situation of little web browser variety, and massive bloat.</p></li>
<li><p>Alternatively, you restrict the amount of control that web developers have over their page, through some simple standard. Provided that this standard is simple enough, our current situation is mitigated, as practically any average Joe can come along and write his own simple &#8220;web browser&#8221; if he wants.</p></li>
</ul>

<p>So again. You&#39;re probably asking, &#8220;What do we do? We already let the web get as complicated as it is,&#8221; and you&#39;d be right. I really can&#39;t answer the question of what we are supposed to do to fix this. However I&#39;ll mention that there has actually been some effort to address these issues. One such project I came across recently is <a href="https://gemini.circumlunar.space">Project Gemini</a> which honestly while minimal, isn&#39;t that bad. It&#39;s supposed to be heavier than Gopher, less complicated than the web, and not a replacement for either of them. So like I said earlier, having a simple standard inevitably makes it easier to create browsers, which is shown in how there are currently 8 Gemini clients listed on <a href="https://gemini.circumlunar.space/clients.html">this page</a> - impressive considering how small Gemini currently is.</p>

<p>So yeah. I&#39;m not saying that Gemini is the solution to our problem, because it is <strong>very minimal</strong>, being mostly text-based, and I personally think it&#39;s impractical for <strong>normal users</strong> who are coming from the current web. They would feel like they&#39;re getting a downgrade, not being able to view videos or listen to music in their browser, not being able to share images practically with their friends, etc. I personally don&#39;t think that <strong>pure text</strong> is the way to go. Some styling is nice to have to at least make your site look somewhat pleasing to the eye.</p>

<p>I mean, I&#39;m sure there&#39;s some UNIX extremist reading this thinking, &#8220;Do one thing and do it well!&#8221; and suggesting that we all for example, download videos through our minimal Gemini browsers to view them in some external purpose-built video player software, or that we all only chat with people using software designed for it, like IRC clients or whatever. Again, this is seriously impractical for normal people who aren&#39;t already into all that sort of stuff (i.e basically people who use Windows or Mac).</p>

<p>Nevertheless. A bit of a rant, but I guess something to think about as our web continues to become more and more bloated as it inevitably will in the years to come.</p>

]]></description>
</item>

<item>
<guid>https://mikejzx.github.io/blog/2020/switching-to-arch.html</guid>
<link>https://mikejzx.github.io/blog/2020/switching-to-arch.html</link>
<pubDate>Fri, 04 Dec 2020 11:59:52 +1100</pubDate>
<title>Switching to Arch</title>
<description><![CDATA[

<h1 id="Switching%20to%20Arch">Switching to Arch</h1>


<p>Around this time last year (a bit earlier actually - October or so) I decided to make the switch to using a Linux distribution as my daily driver (while also dual-booting Windows). Just like everyone else, I distrohopped until I found the distro that I felt was &#8220;just right&#8221;. I settled on Xubuntu - a nice flavour of Ubuntu that runs the good ol&#8217; XFCE4 desktop environment. It just seemed like a nice, fairly snappy operating system. Below is a screenshot of what my system looked like from about April to around last week:</p>

<p><img src="img/switching_to_arch_screen_2020-04-28.webp" alt="My riced XFCE desktop" /></p>

<p>So yeah. It looked nice and all for a while, but recently I was getting sick of it. I decided it was time to switch to Arch.</p>

<p>I had used Arch for the past year or so on an old laptop of mine (this same laptop is where I had installed Ubuntu for the first time years ago!). I had played around with Arch occasionally, and I thought it seemed like a really cool and extensible distribution. I felt like I had loads more flexibility, and that I knew the system better because I had installed everything on it myself from the ground-up.</p>

<p>So, last weekend I got my desktop prepared for a new install of Arch (cleaned up file&#47;directory structure) and put the ISO on a trusty USB. I went ahead with the install - it took me two attempts &#8216;till I got a functioning system. It seemed like the latest 5.9 kernel just doesn&#39;t like my hardware or something. The second time around I went with the LTS kernel, and all went well.</p>

<p>I booted into my new system, and installed whatever essential packages I needed (i.e Neovim, etc). I had decided beforehand that I&#39;d go with Openbox as my window manager, so that&#39;s what I installed and ran initially. I had played around with it, got the basic things configured. However, I soon discovered that Openbox does not have the ability to &#8220;hide window contents while dragging windows&#8221; (see <a href="http://www.lxle.net/forums/discussion/778/hide-window-content-while-dragging/p1">here</a>, things haven&#39;t changed since then apparently). It&#39;s a really small feature, but something I really wanted to have, as it just makes the system feel so much snappier!</p>

<p>Nevertheless, I discovered quickly that the <strong>Fluxbox</strong> window manager actually supports this feature. I had basically never used Fluxbox before (maybe once or twice as a test), but decided to give it a shot anyway. And boy, I&#39;m glad I did! Fluxbox&#39;s man pages are pretty comprehensive (thank god, there isn&#39;t much online resources unfortunately), so I was able to get it configured fairly quickly.</p>

<p>I was very impressed with how customisable and simple Fluxbox actually is. It was basically just what I had been looking for. I was able to adjust it to suit my workflow, using some keybinds such as the following:</p>

<pre><code># Close window
Mod4 Q :Close

# Make window fullscreen
Mod1 F11 :Fullscreen

# Tile window vertically to the left&#47;right.
Mod4 Left :MacroCmd {ResizeTo 50% 100%} {MoveTo 0% 0% TopLeft}
Mod4 Right :MacroCmd {ResizeTo 50% 100%} {MoveTo 0% 0% TopRight}

# Maximise window
Mod4 Up :Maximize

# Restore window if maximised, minimise it if restored.
# The call to &#39;Maximize&#39; here is a hack that is used to actually
# &#39;Restore&#39; the maximised window, since there doesn&#39;t seem to be
# any &#39;Restore&#39; command (at least not in the build of Fluxbox
# that is in the Arch repos).
Mod4 Down :If {Matches (Maximized=yes)} {Maximize} {Minimize}

# Launch script that moves window to other monitor:
# See my dotfiles for the script, I can&#39;t find the original author:
# https:&#47;&#47;github.com&#47;mikejzx&#47;dotfiles
Mod1 Shift N :Exec $HOME&#47;src&#47;scripts&#47;misc&#47;move-to-next-monitor.sh

# A pretty cool command that tiles windows in master&#47;slave format.
Mod4 A :If {Matches (Layer!=Desktop)} {ArrangeWindowsStackRight (Name!=tint2)}

# Launch Rofi to search for programs.
Mod4 S :Exec rofi -show combi -combi-modi "drun,run" -modi combi
</code></pre>

<p>So yeah. Those are the main window management keybinds that I&#39;m using, and they get the job done great. I haven&#39;t tinkered with workspaces yet, since they seem a bit awkward to use on a dual-monitor setup with a floating window manager. Maybe in future I&#39;ll try work something out.</p>

<p>After getting Fluxbox (and everything else on the system) configured, it was time to theme the damn thing! I had initially been using the &#8216;bloe&#8217; theme that came with Fluxbox, since I thought it actually looked decent, and sort of retro-ey. Thing is, I just wanted a dark version of it!</p>

<p>Well, I decided to go ahead and make my own dark version of it. I mean, it took some tweaking, but eventually I was able to get something that I was actually pleased with. I only ended up editing the pixmaps that I was actually using, so that is - close&#47;restore&#47;minimise buttons, window titlebars, etc.</p>

<p>I had to find a GTK theme that went well the Fluxbox theme. Man, it was a pain in the ass, but I did eventually discover a theme called &#8216;Vertex&#8217;, which I think worked well with it. I did just slightly modify the colours of the toolbar&#47;window menus of GTK2 windows, and also removed all &#8216;transitions&#8217; that I could find - since I don&#39;t like them very much.</p>

<p>Finally, I had to get my panel configured. I had installed Tint2 pretty early on, while I was experimenting with Openbox, and yeah it&#39;s pretty awesome. I was able to configure it pretty much just how I wanted. The other day I even put this crazy gradient on it, which when paired with a blur effect (thanks to Tryone144&#39;s fork of the Picom compositor), made it look a bit like the Windows Vista taskbar. I mean, I wasn&#39;t trying to mimick it really, but I think it goes quite well with the rest of the theme. I guess it can be considered a bit of a &#8220;retro&#8221; look now, since interfaces haven&#39;t had that sort of thing in years. Here&#39;s the gradient I used to achieve it:</p>

<pre><code>gradient = vertical
start_color = #404040 55
color_stop = 50.000000 #4a4a4a 55
color_stop = 52.000000 #0c0c0c 30
color_stop = 93.000000 #0a0a0a 30
color_stop = 94.000000 #ffffff 10
color_stop = 96.000000 #ffffff 10
color_stop = 98.000000 #000000 100
end_color = #000000 100
</code></pre>

<p>And here&#39;s the resulting desktop. A bit of a throwback to the late 2000s days of computing I guess. It definitely won&#39;t suit everyone&#39;s tastes, but it suits mine!</p>

<p><img src="img/switching_to_arch_screen_2020-12-04_main.webp" alt="Arch desktop screenshot" /></p>

<p>Oh, and I just thought this was really cool too - this is from the Tint2 panel on my left monitor. Got a nice MPD status display there with a play&#47;pause icon! Of course clicking it also runs <code>mpc toggle</code>.</p>

<p><img src="img/switching_to_arch_screen_2020-12-04_left.webp" alt="Tint2 on other monitor" /></p>

<p>And that&#39;s it. As of now, I&#39;ve put my dotfiles on GitHub <a href="https://github.com/mikejzx/dotfiles">here</a> for my own sake really, but if you&#39;re interested or were wondering how I did something, feel free to take a look - most of it should be there.</p>

]]></description>
</item>

<item>
<guid>https://mikejzx.github.io/blog/2020/new-site-and-blog.html</guid>
<link>https://mikejzx.github.io/blog/2020/new-site-and-blog.html</link>
<pubDate>Sat, 21 Nov 2020 19:36:47 +1100</pubDate>
<title>New Site and Blog!</title>
<description><![CDATA[

<h1 id="New%20Site%20and%20Blog!">New Site and Blog!</h1>


<p>Welcome to my new site!</p>

<p>So these past few days I have been working on re-writing this site from the ground up, and getting a blog component implemented. I was totally inspired to do so after seeing a <a href="https://www.youtube.com/watch?v=N_ttw2Dihn8">video posted on YouTube by Wolfgang,</a> and after coming across <a href="https://tarunbatra.com/blog/x/git-before-github/">this awesome article</a> by accident. (The subject of the article is irrelevant, I just liked the way he laid out his site). I figured I&#39;d try make my own &#8220;blog&#8221;, even though I know that literally like nobody would be reading it. I just thought it be a bit entertaining.</p>

<p>Thanks to Roman Zolotarev for his <a href="https://www.romanzolotarev.com/ssg.html">script</a>, which is the subject of the video I linked above. Without his work, we&#39;d all be stuck using bloated static site generators like Hexo.</p>

<p>Anyway, that&#39;s all really. Don&#39;t expect me to post here very often - I have some ideas for what to do, but not sure when I&#39;ll get round to posting them.</p>

]]></description>
</item>
</channel></rss>
