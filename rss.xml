<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="rss.css"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>Mike's blog</title>
<description>Updates from Mike's blog</description>
<language>en-us</language>
<link>https://mikejzx.github.io/rss.xml</link>
<atom:link href="https://mikejzx.github.io/rss.xml" rel="self" type="application/atom+xml" />
<item>
<title>Controller Mappings for Gran Turismo 1-4 Emulation</title>
<guid>https://mikejzx.github.io/blog/2022/gt.html</guid>
<link>https://mikejzx.github.io/blog/2022/gt.html</link>
<pubDate>Sun, 28 Aug 2022 00:00:00 +1000</pubDate>
<description><![CDATA[
			<header>
				Controller Mappings for Gran Turismo 1&#45;4 Emulation
				<span style="float: right">2022-08-28</span>
			</header>
			<p>
				I&rsquo;ve always been a fan of the Gran&nbsp;Turismo series of games, and in the last year or two have been playing around with running these games in an emulator on PC.
				The classic PS1 games run flawlessly in the DuckStation emulator, and the PS2&#45;era games work well in the PCSX2 emulator.
				In general, you are able to play the games just as if you were playing on a real console &#40;although sometimes playing on the real thing just makes these games feel that extra bit more nostalgic&#41;.
			</p>
			<p>
				Playing games like this in an emulator has certain advantages.
				The resolution of the games can be adjusted &#40;if you&rsquo;re into that sort of thing; I personally prefer emulating at the native resolution&#41;, you are able to create virtual memory cards, and manage your saves in bizarre ways &#40;not to mention the ability to create save states that you can return to in the game&#41;.
			</p>
			<p>
				One advantage of playing in an emulator, that would be incredibly difficult if using real console hardware, is the ability to remap the controller&rsquo;s buttons and axes to essentially whatever you desire.
				<span class="sntc">This is especially very useful for these old racing games like Gran&nbsp;Turismo, particularly in relation to having <b>analog</b> accelerator brake inputs, which will be one of the main focuses of this article.</span>
			</p>
			<h2>
				The Goal
			</h2>
			<p>
				The goal here is to remap the controller in such a way that will allow for easy modulation of the accelerator and brake inputs in the game.
				Generally, racing games that came out from the PS3&#45;era onwards would usually use the left and right analog trigger buttons &#40;L2 and R2&#41; for the brake and accelerator respectively, as this is a fairly modest scheme and is very easy to use &#40;and it quite familiar to most people, having been used in popular games such as Grand&nbsp;Theft&nbsp;Auto IV and V&#41;.
				Many players of Gran&nbsp;Turismo&nbsp;5 and 6 on the PS3 would map their controllers in this way, and I believe that later games like GT&nbsp;Sport and Gran&nbsp;Turismo&nbsp;7 use these mappings by default.
			</p>
			<p>
				Traditionally, the only way an analog throttle&#47;brake could&rsquo;ve been achieved in the PS1 games &#40;other than using a wheel with pedals, etc.&#41;, was to adjust the in&#45;game controller mapping settings to use one of the analog sticks &#40;e.g. the up&#45;down axis of the right stick&#41; to be mapped to the accelerator and brake.
				The game is playable in this way, and there are people who have played the game like this for years and never looked back.
				The DualShock&nbsp;2 controllers that were used on the PS2 were interesting in that most buttons on it were pressure&#45;sensitive; this meant that the standard Cross for accelerate, and Square for brake, worked reasonably well as the player was able to at least modulate the pressure they put on these buttons.
			</p>
			<p>
				However, the DualShock&nbsp;2&rsquo;s pressure&#45;sensitive face buttons turned out to be not much more than a mere quirk, as we would never see this feature again in later controllers like the DualShock&nbsp;3 and Xbox gamepads.
				Since these later gamepads like the DualShock&nbsp;3 &#40;that I use&#41; don&rsquo;t have pressure&#45;sensitive buttons, using them to play the PS2 Gran&nbsp;Turismo games in an emulator means that you face the same dilemma as that of the early PS1 games&mdash;if you wish to modulate the accelerator and brake, your only option is to map the analog sticks.
				One nice feature of the DualShock&nbsp;3 PS3 controllers &#40;and I believe Xbox 360 gamepads&#41; is that their trigger buttons are in fact analog and use their own axis.
				The problem here of course, is that DualShock&nbsp;2 controllers didn&rsquo;t have this axis, and therefore the games &#40;and emulators&#41; cannot take advantage of it.
			</p>
			<p>
				Thankfully, there is a workaround to this to allow us to use this extra axis for the accelerator and brake inputs in the old Gran&nbsp;Turismo games.
				The technique that will be used here will be to map the accelerator and brake to the analog sticks using the in&#45;game input mapper, and then on top of this, apply our own custom mappings to the controller itself, through the use of external tools.
				To get an idea of this more clearly; imagine that in the game, we map the accelerator and brake to the Y&#45;axis of the right analog stick.
				That is, the accelerator is pressed as the right analog stick is pushed upward, and the brake is pressed as the right&#45;analog stick is pushed downward.
				By applying our own mappings externally, we can &ldquo;hack&rdquo; this using a mapping, so that the left analog trigger of the controller is used to control &#40;virtually&#41; how much the analog stick is pushed down &#40;for brake&#41;, and the right trigger is mapped to control how much the stick is pushed up &#40;for accelerator&#41;.
				By doing this we are able to use the left&#47;right analog triggers &#40;L2 and R2&#41; of the controller to comfortably modulate the brake and accelerator inputs of the PS1 and PS2 games.
			</p>
			<h2>
				Achieving the External Mappings
			</h2>
			<p>
				This article is catered towards Linux users because of the totally non&#45;existent documentation of how this can be achieved easily and intuitively on these operating systems.
			</p>
			<p>
				Presumably most people who find this article will be Windows users perhaps wondering how they can achieve these sorts of mappings.
				If you are on Windows, the process of achieving this  is actually rather straight&#45;forward; all that you will need is some sort of external controller mapping utility.
				One that I have used in the past for DualShock&nbsp;3 that works perfectly is BetterDS3, however, this tool requires that you have the MotionInJoy DualShock&nbsp;3 drivers installed &#40;which is generally considered to be a very bad idea due to MotionInJoy&rsquo;s malicious software; installing the drivers &lsquo;manually&rsquo;, which is what I did, is generally considered the safest approach&#41;.
				If you using a DualShock&nbsp;4 or 5, or an Xbox gamepad, you will need to do some research of your own &#40;as I don&rsquo;t own any of these controllers&#41; to find good Windows drivers for your controller and a mapping utility.
			</p>
			<p>
				Over on Linux, SDL is very widely&#45;used as an input backend, and one that both the PCSX2 and DuckStation emulators can use &#40;you should ensure that the backends in the emulators are indeed configured so, and not to something else like &lsquo;evdev&rsquo;, or else our mappings will not take effect&#41;.
				DualShock controller support is also available directly in the Linux kernel.
				<span class="sntc">If you too are a Gentoo user then you will need to <a href="https://wiki.gentoo.org/wiki/Sony_DualShock">build your kernel with the DualShock drivers included</a>.</span>
				Other distributions &#40;Debian, Arch Linux, etc.&#41; will almost always ship their kernels with this built in already for you.
				We will take advantage of SDL&rsquo;s controller mapping ability, which, while it is somewhat difficult to understand at first &#40;and frankly quite scary to look at&#41;, it does get the job done.
				The mappings I will show will be for DualShock&nbsp;3 controllers.
				<span class="sntc">If you are not using a DualShock&nbsp;3 controller, you will need to find a base mapping for your controller to work off of, which you can find in the <a href="https://github.com/gabomdq/SDL_GameControllerDB">SDL GameControllerDB list</a> online.</span>
				You can also find a default mapping for your controller by using one of the mapping tools linked on that page; which should be able to generate one for you.
				Once you have a mapping for your controller, you should be able to apply the techniques described here to create your own mappings.
			</p>
			<h2>
				How SDL Controller Mapping Strings Work
			</h2>
			<p>
				Windows users who already have their controller mapping method worked out can skip this part.
				Linux users who don&rsquo;t happen to be using the exact same DualShock&nbsp;3 controller as me will have to read on to understand how to map their own controller.
			</p>
			<p>
				An SDL controller mapping string appears like follows:
			</p>
			<pre>
030000004c0500006802000011810000,PS3 Controller,a:b0,b:b1,back:b8,dpdown:b14,dpleft:b15,dpright:b16,dpup:b13,guide:b10,leftshoulder:b4,leftstick:b11,lefttrigger:a2,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b12,righttrigger:a5,rightx:a3,righty:a4,start:b9,x:b3,y:b2,			</pre>
			<p class="sentspc noindent">
				This is the base mapping that I use for my DualShock&nbsp;3 controller, and that I work from to remap things to what I need.
				The first section &#40;the controller&rsquo;s GUID&#41;, and the &ldquo;PS3 Controller&rdquo; part can be ignored for now.
				The most important thing here is the comma&#45;separated list of &lsquo;key:value&rsquo; pairs, which define how the controller is mapped.
				The important thing to understand is that the &lsquo;key&rsquo; in these pairs refers to the abstract button&#47;axis input on the gamepad that will be sent to the game &#40;with abstract names such as &lsquo;leftx&rsquo;, &lsquo;righty&rsquo;, which refer to the left stick X&#45;axis and right stick Y&#45;axis respectively&#41;.
				<span class="sntc">The &lsquo;value&rsquo; part &#40;the <code>a0</code>, <code>b1</code>, <code>b8</code>, etc.&#41; are the identifiers of each button&#47;axis on the controller, as identified by the kernel driver.</span>
			</p>
			<h3>
				Applying the Mapping
			</h3>
			<p>
				In order to actually apply a controller mapping to our emulator; we should first ensure that the emulator is in fact using SDL as the input backend.
				PCSX2 seems to use SDL by default.
				In DuckStation we can check by going to the &lsquo;General Settings&rsquo; and ensuring that the &lsquo;Controller Backend&rsquo; is set to SDL.
			</p>
			<p>
				Next, we should ensure that the emulator is not trying to do any unusual mapping of it&rsquo;s own.
				This is because we don&rsquo;t want the emulator mess up any of our manually&#45;specified mappings.
				This is only an issue for DuckStation, as PCSX2 doesn&rsquo;t really allow you to modify the mappings.
				The reader might be asking why we wouldn&rsquo;t just use the emulator&rsquo;s own mapping options to achieve what we want; but at least in the case of DuckStation, the functionality of mapping the positive&#47;negative sides of a controller axis is completely missing; therefore we need to resort to manually mapping with SDL.
			</p>
			<p>
				<span class="sntc">Once we&rsquo;ve ensured that the emulator is not trying to remap anything, we need to start the emulator with the <code>SDL&#95;GAMECONTROLLERCONFIG</code> environment variable set to the mapping string.</span>
				For example, to start PCSX2 with a custom SDL mapping, something along the lines of the following commands should be used:
			</p>
			<pre>
SDL&#95;GAMECONTROLLERCONFIG&#61;"&#60;mapping string&#62;" pcsx2
&#35; Or alternatively:
export SDL&#95;GAMECONTROLLERCONFIG&#61;"&#60;mapping string&#62;" &#38;&#38; pcsx2			</pre>
			<p class="sentspc noindent">
				<span class="sntc">PCSX2 should now be started with the custom mapping in <code>&lt;mapping string&gt;</code> loaded.</span>
				You may wish to write some simple shell scripts that allow you to easily launch your emulated games with these controller mappings automatically applied.
			</p>
			<p>
				<span class="sntc">If you provide your base mapping in the <code>&lt;mapping string&gt;</code> part of that command, then you should be able to play games as normal.</span>
				To test that the mappings are being applied, you can use a mapping string like the following, where every button and axis is unbound; you should not be able to provide any input to the game.
				You may need to replace the GUID and &lsquo;PS3 Controller&rsquo; part with that of your own controller:
			</p>
			<pre>
030000004c0500006802000011810000,PS3 Controller,a:,b:,back:,dpdown:,dpleft:,dpright:,dpup:,guide:,leftshoulder:,leftstick:,lefttrigger:,leftx:,lefty:,rightshoulder:,rightstick:,righttrigger:,rightx:,righty:,start:,x:,y:,			</pre>
			<p class="sentspc noindent">
			</p>
			<h3>
				An Example Mapping
			</h3>
			<p>
				The important thing to note is what buttons and axes we actually want to map.
				Consider the example used earlier of mapping the right stick &#40;which should in the game be set to control the accelerator and brake&#41; to the left&#47;right trigger buttons.
				The abstract &lsquo;key&rsquo; we want to change, is the &lsquo;righty&rsquo; one &#40;pronounced &lsquo;Right Y&rsquo;, not &lsquo;Righty&rsquo;!&#41;.
				As an example, if we modify the above mapping so that the &lsquo;righty&rsquo; is not mapped to any axis, like this:
			</p>
			<pre>
righty:			</pre>
			<p class="sentspc noindent">
				then we will be unable to accelerate or brake in the game &#40;if the accelerator and brake is mapped to the right Y axis&#41;.
				This is the simplest mapping possible.
			</p>
			<p>
				Now, let&rsquo;s say that we want to map our left and right triggers &#40;L2&#47;R2&#41; to the &lsquo;righty&rsquo; axis.
				<span class="sntc">Readers who ate their Weet&#45;Bix for breakfast this morning may have already noticed that the left and right triggers have two different identifiers &#40;<code>a2</code> and <code>a5</code>&#41;, indicating that they are in fact treated as two different axes:</span>
			</p>
			<pre>
lefttrigger:a2,righttrigger:a5,			</pre>
			<p class="sentspc noindent">
				For months I would think that this was the fatal flaw in the mapping syntax that would make achieving the goal mapping essentially impossible.
				<span class="sntc">The difficult question here is of course, how can we map the single &lsquo;righty&rsquo; analog axis to both the <code>a2</code> and <code>a5</code> trigger axes at the same time?</span>
				<span class="sntc">Thankfully, I recently turned out to be wrong when I, at last, stumbled upon the following GitHub issue: <a href="https://github.com/libsdl-org/SDL/issues/1166">&#35;1166</a>.</span>
				This issue includes quotes from the SDL mailing list, which properly describe and document an extended syntax of the SDL mapping strings &#40;at the bottom of the linked page&#41;.
				This documentation was incredibly difficult to find, but using it we are able to finally map the individual positive&#47;negative halves of the analog stick to the left and right triggers the way we want, using this extended syntax:
			</p>
			<pre>
&#45;righty:a2,&#43;righty:a5			</pre>
			<p class="sentspc noindent">
				<span class="sntc">where <code>a2</code> is the identifier of the left&#45;side trigger axis on the controller &#40;in this case a DualShock&nbsp;3&#41;, and <code>a5</code> is the right&#45;side trigger axis.</span>
				<span class="sntc">This isn&rsquo;t the full string though, as for this to work, we must also unmap the left and right trigger buttons themselves &#40;or else SDL will confused because the <code>a2</code> and <code>a5</code> identifiers cannot appear in multiple places at once&#41;:</span>
			</p>
			<pre>
lefttrigger:,righttrigger:,&#45;righty:a2,&#43;righty:a5			</pre>
			<p class="sentspc noindent">
				Of course, this means that whatever the left&#47;right trigger buttons are mapped to in the game, will become unusable &#40;which isn&rsquo;t really a problem for most cases&#41;.
				If you for whatever reason have a need for what the left&#47;right trigger buttons are originally mapped to; your only option is to map them to something else on the controller.
			</p>
			<p>
				This sort of format for the mapping strings will be used for our mappings for each of the games, and Gran&nbsp;Turismo 1, 2, and 4 will each have very similar mappings.
				There is a better mapping for Gran&nbsp;Turismo&nbsp;3 that we can create because of it&rsquo;s more versatile in&#45;game mapping system that the other games don&rsquo;t have.
			</p>
			<p>
				The following sections will describe the mappings that can be used for each of the games.
				<span class="sntc">Please also remember that for each of the mappings shown, the left trigger and right trigger axes are identified as <code>a2</code> and <code>a5</code> respectively, which may or may not be the same for your controller.</span>
				It is good to become familiar with what identifiers correspond to what on your controller to make producing your own mappings easier.
			</p>
			<h2>
				Gran&nbsp;Turismo&nbsp;1 &amp; 2
			</h2>
			<p>
				Both the first and second installments of Gran&nbsp;Turismo use the same input mapping system in the game.
				The following images show how the controller should be configured inside of both Gran&nbsp;Turismo&nbsp;1 and 2 in their options menus: 
			</p>
			<img src="/files/img/gt_mapping_1.jpg" alt="Gran Turismo 1 in-game mapping"/>
				
			<img src="/files/img/gt_mapping_2.jpg" alt="Gran Turismo 2 in-game mapping"/>
			<p>
				The next thing to do is formulate a mapping that considers the fact that our right stick now is acting as the accelerator and brake input.
				The mapping should map the left trigger to the downward direction &#40;&#43;Y&#41; of the right analog stick &#40;for brake&#41;, and map the right trigger to the upward direction &#40;&#45;Y&#41; of the stick &#40;for accelerator&#41;.
			</p>
			<p>
				<span class="sntc">The modified parts of my SDL mapping is the following, where <code>a2</code> and <code>a5</code> are the identifiers of the L2 and R2 axes respectively:</span>
			</p>
			<pre>
lefttrigger:,righttrigger:,&#45;righty:a5,&#43;righty:a2,			</pre>
			<p class="sentspc noindent">
				And the final full mapping for Gran&nbsp;Turismo&nbsp;1 &amp; 2 for my controller:
			</p>
			<pre>
030000004c0500006802000011810000,PS3 Controller,a:b0,b:b1,back:b8,dpdown:b14,dpleft:b15,dpright:b16,dpup:b13,guide:b10,leftshoulder:b4,leftstick:b11,lefttrigger:,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b12,righttrigger:,rightx:a3,&#45;righty:a5,&#43;righty:a2,start:b9,x:b3,y:b2,			</pre>
			<p class="sentspc noindent">
			</p>
			<h2>
				Gran&nbsp;Turismo&nbsp;4
			</h2>
			<p>
				Gran&nbsp;Turismo&nbsp;4 can be mapped just as easily as 1 and 2.
				The only different thing here is that the game only allows us to use the left stick for acceleration and brake, rather than the right like we used in the other games.
				The following screenshot shows the in&#45;game mapping that should be used: 
			</p>
			<img src="/files/img/gt_mapping_4.jpg" alt="Gran Turismo 4 in-game mapping"/>
				Now, we need to map the left trigger to the downward direction &#40;&#43;Y&#41; of the left analog stick &#40;for brake&#41;, and the right trigger to the upward direction &#40;&#45;Y&#41; of the same analog stick &#40;for accelerator&#41;.
			<p>
				The modified parts of my SDL mapping are the following:
			</p>
			<pre>
lefttrigger:,&#43;lefty:a2,&#45;lefty:a5,righttrigger:,			</pre>
			<p class="sentspc noindent">
				And the final mapping for Gran&nbsp;Turismo&nbsp;4:
			</p>
			<pre>
030000004c0500006802000011810000,PS3 Controller,a:b0,b:b1,back:b8,dpdown:b14,dpleft:b15,dpright:b16,dpup:b13,guide:b10,leftshoulder:b4,leftstick:b11,lefttrigger:,leftx:a0,&#43;lefty:a2,&#45;lefty:a5,rightshoulder:b5,rightstick:b12,righttrigger:,rightx:a3,righty:a4,start:b9,x:b3,y:b2,			</pre>
			<p class="sentspc noindent">
			</p>
			<h2>
				Gran&nbsp;Turismo&nbsp;3: A&#45;Spec
			</h2>
			<p>
				Gran&nbsp;Turismo&nbsp;3 allows us more flexibility with the controller mappings; as it allows us to actually map the accelerator and brake inputs to totally seperate analog sticks and axes.
				We can take advantage of this, and create a mapping that allows us to press the brake and accelerator simultaneously &#40;unlike in the other games, where the accelerator and brake are locked to the same axis&#41;.
			</p>
			<p>
				The in&#45;game mapping that I use is shown below: 
			</p>
			<img src="/files/img/gt_mapping_3.jpg" alt="Gran Turismo 3 in-game mapping"/>
			<p class="sentspc noindent">
				To map the controller correctly, as this configuration would be hilariously uncomfortable to play with without a custom mapping, we need to map the left trigger to the downward &#40;&#43;Y&#41; direction of the right stick for braking input, and map the right trigger to the rightward direction &#40;&#43;X&#41; of the right stick for accelerator input.
			</p>
			<p>
				The modified parts of my SDL mapping are as follows:
			</p>
			<pre>
lefttrigger:,righttrigger:,&#43;rightx:a5,&#43;righty:a2,			</pre>
			<p class="sentspc noindent">
				The final mapping I use for Gran&nbsp;Turismo&nbsp;3: A&#45;Spec, is:
			</p>
			<pre>
030000004c0500006802000011810000,PS3 Controller,a:b0,b:b1,back:b8,dpdown:b14,dpleft:b15,dpright:b16,dpup:b13,guide:b10,leftshoulder:b4,leftstick:b11,lefttrigger:,leftx:a0,lefty:a1,rightshoulder:b5,rightstick:b12,righttrigger:,&#43;rightx:a5,&#43;righty:a2,start:b9,x:b3,y:b2,			</pre>
			<p class="sentspc noindent">
			</p>
			<h2>
				Potential Issues
			</h2>
			<p>
				Because of these crazy mappings, it&rsquo;s possible that some parts of the games would be unusable while these mappings are applied.
				For example, the Data Logger in Gran&nbsp;Turismo&nbsp;3 allows you to use the right stick to move around; which isn&rsquo;t really possible because of the wacky controller mapping that is applied.
				I assume that the other games would have other things that would be unusable with these mappings.
				<span class="sntc">If you wish to access these unusable sections of the games, the obvious way to do it is to just set the controller to use a normal mapping &#40;e.g. via the <code>SDL&#95;GAMECONTROLLERCONFIG</code> environment variable&#41;.</span>
			</p>
		]]></description>
</item>
<item>
<title>3D Anaglyph Pro for Unity Now Available</title>
<guid>https://mikejzx.github.io/blog/2022/anaglyph.html</guid>
<link>https://mikejzx.github.io/blog/2022/anaglyph.html</link>
<pubDate>Wed, 13 Jul 2022 00:00:00 +1000</pubDate>
<description><![CDATA[
			<header>
				3D Anaglyph Pro for Unity Now Available
				<span style="float: right">2022-07-13</span>
			</header>
			<p>
				<span class="sntc"><a href="https://assetstore.unity.com/packages/slug/222754">Get 3D Anaglyph Pro on the Unity Asset Store!</a></span>
				
			</p>
			<img src="/files/img/anaglyph0.webp" alt="3D Anaglyph Pro"/>
			<p>
				<span class="sntc"><a href="https://assetstore.unity.com/packages/slug/222754">3D Anaglyph Pro</a> is a Unity asset that allows you to render high&#45;quality 3D anaglyphs in real&#45;time.</span>
				<span class="sntc">I recently released this asset, after re&#45;writing my <a href="https://www.youtube.com/watch?v=4PcuNIqLdTw">old anaglyph effect</a> from scratch, focusing on making something that is more usable by people and produces more accurate anaglyphs.</span>
				<span class="sntc">See a test video of the effect in action <a href="https://www.youtube.com/watch?v=LYmQpSpUJp8">here</a>!</span>
			</p>
			<p>
				The new effect is a lot more customisable than the old one.
				<span class="sntc">The eye separation width and convergence distance are now fully&#45;adjustable, and the effect internally uses a 3x6 matrix for determining output colours, allowing for <a href="https://www.site.uottawa.ca/~edubois/anaglyph/">Dubois anaglyphs</a> to be generated, and for maximum control over the output image.</span>
				A number of preset schemes are provided, making common schemes &#40;red&#47;cyan, Dubois red&#47;cyan, monochrome, etc.&#41; easily&#45;accessible to the user.
				<span class="sntc">The effect by default uses a Dubois matrix for LCD screens, proposed by Z. Zhang and D. M&#x1D9C;Allister <a href="https://web.archive.org/web/20070206033630/http://research.csc.ncsu.edu:80/stereographics/ei06.pdf">here</a>.</span>
				The stereoscopic image pairs are now generated in a much more accurate fashion, by making use of custom projection matrices, unlike the old method which used two very basic offsetted cameras.
				This means that the effect looks more realistic, as if you&rsquo;re really in the scene!
				<span class="sntc">Applying the effect is also incredibly simple, and is shown <a href="https://www.youtube.com/watch?v=fQaAiNZ8Iro">here</a>.</span>
			</p>
			<p>
				3D Anaglyph Pro also supports using post&#45;processing effects, in a clunky, but functional way.
				The way this is achieved is by allowing the user to manually specify a second camera to use for the rendering of the second stereo image.
				This gives the user full control over the effects on the second camera, allowing them to apply any post&#45;processing effects they like to it, which will usually consist of those on the main camera.
				<span class="sntc">Setting up the effect in this way is demonstrated in <a href="https://www.youtube.com/watch?v=E_0ju-mX1hg">this guide on YouTube</a>.</span>
			</p>
			<p>
				Unfortunately the effect does come with a performance cost.
				Having to render the scene twice in full &#40;and apply post&#45;processing effects twice&#41; means that the cost of rendering is twofold, and for complex scenes on older or low&#45;end hardware the effect may be too demanding.
				Additionally, there are bugs in Unity that can sometimes prevent the effect from operating at maximum efficiency, most notably in relation to occlusion culling.
				<span class="sntc">Unity has been known for years to not calculate culling matrices correctly with oblique projection matrices &#40;<a href="https://forum.unity.com/threads/occlusion-matrices-computed-incorrectly-by-unity.450827/">see this forum thread</a>&#41;, and despite <a href="https://issuetracker.unity3d.com/issues/setting-the-cameras-culling-matrix-breaks-culling-for-oblique-matrices">many issues</a> being opened in the Issue Tracker on the matter, these bugs still exist in the engine today.</span>
				As a result, occlusion culling sometimes needs to be disabled when using the anaglyph effect, to avoid artifacts caused by the improperly&#45;calculated culling matrix &#40;i.e. objects popping in and out of view constantly&#41;.
				However, this is usually only a problem in complex scenes, and when using large eye separation widths.
			</p>
		]]></description>
</item>
<item>
<title>New Roff-based Blog System</title>
<guid>https://mikejzx.github.io/blog/2022/been-a-while.html</guid>
<link>https://mikejzx.github.io/blog/2022/been-a-while.html</link>
<pubDate>Wed, 04 May 2022 00:00:00 +1000</pubDate>
<description><![CDATA[
			<header>
				New Roff&#45;based Blog System
				<span style="float: right">2022-05-04</span>
			</header>
			<p>
				So, it&rsquo;s definitely been a good while since I last wrote anything here on my site.
				Though, fear not!
				<span class="sntc">I am back, after having completely re&#45;written my site from the ground up, I am no longer using <code>ssg5</code> and <code>rssg</code>, but rather a new Makefile&#45;based system I built up myself, using my own scripts and programs to generate this whole thing; as the old site system was just so ugly and messy that it had become essentially unmaintainable.</span>
				I think from hereon I&rsquo;ll try to make more of an effort to write more articles here in time&mdash;because as it stands, I feel like I am yet to have played my part in serving the web with actually interesting content&hellip;
				Especially in our current world where the web is dominated by bloat, bombardment of obnoxious advertisements, trillion&#45;dollar corporations, social media, biased news, biased searches &#40;looking at you DuckDuckGo, for just recently hopping on the bandwagon too&#41;, SEO spam, and just plain rubbish content. I hope my site provides you with a breath of fresh air through the mostly text&#45;based content over here.
			</p>
			<p>
				The new site generation system is fairly straight&#45;forward.
				As you&rsquo;d imagine; a nice source directory with HTML files for most things, a few &lsquo;templates&rsquo;, and the &lsquo;blog&rsquo; section with it&rsquo;s source files.
				I have general rules in the Makefile which automate most things, like updating the stylesheet, copying over new files, and re&#45;compiling articles when they change, etc.
				I also wrote a simple script that runs when articles are added or changed, that generates a nice RSS feed of the blog.
				However, the main new interesting thing about the blog, is that I no longer need to write it using Markdown.
				Instead, I now write these articles using a variation of the Roff &lsquo;ms&rsquo; macros!
				&#40;Converted my old articles to the new format, though I skipped the small useless articles that have essentially lost all their relevance now&#41;.
				This probably sounds incredibly stupid, and possibly even masochistic, but there is I think a possibly interesting reason I chose this format of all other formats.
				The reason essentially boils down to typography.
				If you&rsquo;ve got eagle eyes or if you pay particularly close attention to the typographic subtleties of content you read, then you may have noticed the specific effect I aimed for here.
			</p>
			<p>
				<span class="sntc">Specifically, I was aiming for proper <i>sentence spacing</i> in my webpage.</span>
				I developed somewhat of a habit at some point last year where I started putting two spaces after sentences I was writing to indicate the end of sentences more clearly &#40;e.g. in plaintext documents&#41;; I have no idea how this habit started; but in general I feel like after I discovered and realised it was a thing, I found it a lot more aesthetically pleasing than the robotic word&#45;spacing&#45;after&#45;sentences that has become ever&#45;increasingly ubiquitous in modern times.
				<span class="sntc">Perhaps it was also due to a desire to stick to a more conservative, &lsquo;traditional&rsquo; way of formatting text, which had unfortunately faded in the last few decades due to all sorts of reasons &#40;<a href="https://www.tomsarazac.com/tom/opinions/space-after-periods.html">see</a>&#41;, most notably of which here on the web was due to some technical limitations of HTML.</span>
				<span class="sntc">As of course, HTML normalises all whitespace between words into uniform spacing, the specification does not provide any <code>&lt;sentence&gt;</code> tag to use for this purpose, and there seemed to be very little concern for the typographic implications of this at the time.</span>
				<span class="sntc">&#40;Edit: see <i>Addendum</i> at the bottom of the article&#41;.</span>
			</p>
			<p>
				So to implement this new feature, my first idea was to just borrow the convention used in Roff for sentence separation, and use it in Markdown.
				<span class="sntc">For the sake of brevity&mdash;for people who haven&rsquo;t used a Roff typesetting system before &#40;e.g. the GNU implementation, <code>groff</code>&#41;&mdash;I&rsquo;ll simply state that in Roff, you are expected to start sentences on lines of their own, to indicate to the typesetter that when a line ends with sentence&#45;ending punctuation such as a full&#45;stop, question mark, or exclamation mark, it is going to be the end of a sentence &#40;there is a workaround for situations where you <i>don&rsquo;t</i> want a line that ends with this kind of punctuation to be considered the end of a sentence, by using a zero&#45;width space escape character&#41;.</span>
				At first glance, one would assume that using this same convention for indicating the end of a sentence should be relatively straight&#45;forward to use in Markdown.
				<span class="sntc">And indeed, you can write a basic &ldquo;Markdown&rdquo; parser that achieves this, finding the correct ends of sentences in <i>paragraphs</i> based on where the lines start and end.</span>
				However, the system would fall apart once list items are taken into consideration; and it was the thing I stumbled upon while I myself were having a go at writing a basic Markdown parser that did this.
				In Markdown, lists items can only be defined on a single line.  However, in Roff, a &ldquo;list item&rdquo; is actually just an indented paragraph with a bullet point next to it, so it doesn&rsquo;t suffer from this problem.
			</p>
			<p>
				I feel like the cause of this issue goes back to the roots of what Markdown really was intended to be used for.
				<span class="sntc">I had read an article not long ago on the web by Adam Hyde, where he poses the question <a href="https://www.adamhyde.net/whats-wrong-with-markdown/">&ldquo;What&rsquo;s wrong with Markdown?&rdquo;</a>, and puts forth a few points.</span>
				<span class="sntc">He expresses his view that Markdown generally has very limited use cases, and suggests that, &ldquo;Markdown isn&rsquo;t designed for creating HTML&rdquo;, which is perhaps a little exaggerated, as John Gruber, the author of Markdown, introduces it <a href="https://daringfireball.net/projects/markdown/">on his site</a> &#40;which Hyde also links&#41; not only as &ldquo;a text&#45;to&#45;HTML conversion tool for web writers&rdquo;, but also notes that the structure of Markdown places a strong emphasis on being &ldquo;publishable as&#45;is, as plain text, without looking like it&rsquo;s been marked up with tags or formatting instructions&rdquo;, i.e. it should be possible to read a Markdown document in it&rsquo;s <i>verbatim</i> form &#40;as Hyde indeed notes, but not necessarily to the extent that he suggests&#41;.</span>
				This in turn creates a format that needs to make compromises in it&rsquo;s ability to be converted to HTML, to allow for easy reading of the source content.
				This, and the lack of a proper specification, are why there are so many &ldquo;variations&rdquo;, of Markdown in the wild&mdash;it seems almost as though each website has their own additions and exclusions to the format.
				Another thing to note is that Markdown is more often converted to HTML than it is published as&#45;is, and hence there is more incentive to add more things that help in the HTML conversions, but also then create a compromise in the verbatim reading experience of the content &#40;inline links being a notable offender here&#41; which then defeats one of the original purposes of the format.
				This is especially problematic when &ldquo;the single biggest source of inspiration for Markdown’s syntax is the format of plain text e&#45;mail.&rdquo;
			</p>
			<p>
				I will note, that technically it could be possible to achieve this in Markdown, or any markup language for that matter; and that is through some kind of automatic sentence&#45;detection software.
				The approach here would be to write up your document as you normally would, in Markdown or whatever, possibly generate the HTML from it to split it into paragraphs and list items and so on, then run some kind of post&#45;processor that looks at the content within each tag and attempts to split them into sentences.
				<span class="sntc">This is definitely possible, I&rsquo;ve actually written some code for a project of mine that does this, a terminal Gemini client called <code>sr71</code> that interprets paragraphs as an array of words and applies the spacing on it&rsquo;s own; and is accurate in most cases for determining the end of sentences, via a few rules that I defined.</span>
				<span class="sntc">&#40;I also implemented, as an experiment, various other really nice typographic features into <code>sr71</code>, like a Knuth&#45;Plass approach to line breaking, which yields really nice text&#45;justification in the terminal, with hanging punctuation too&mdash;you should check it out if you too sometimes browse Geminispace or Gopherspace!&#41;</span>
				The obvious problem with the approach of automated sentence detection is that the software will inevitably make errors, as it&rsquo;s incredibly difficult to program a piece of software to detect literally every possible case of where a sentence would end.
				Perhaps a solution like this is fine for reading content other people have written, but as the author of the text content, I feel like I should have the ability to specify where my sentences end.
			</p>
			<p>
				<span class="sntc">Another possible method of achieving this in Markdown or other languages, that <i>does</i> give the writer control over the situation, would be to define some kind of &lsquo;sentence&#45;end&rsquo; escape sequence.</span>
				This would work fine to achieve the desired effect, but in my opinion I think it&rsquo;d end up really detracting from the writing experience and in the case of Markdown, would contribute to the whole problem mentioned earlier about &lsquo;adding features to improve HTML output at the cost of readability in the source format&rsquo;.
				I think it&rsquo;d be more trouble than it&rsquo;s worth and best to just leave something like Markdown behind, and focus on using a more versatile format.
			</p>
			<p>
				After establishing that Markdown was unsuitable for my needs, I immediately turned to the alternative I had considered beforehand, even before I started writing my parser program.
				Roff had always been a system that I quite enjoyed writing in; being a traditional Unix document preparation system, it has a very nice and old&#45;school feel to it, and in some sense is designed to be compatible with the Unix computing ethos, having source formats that are very easily &lsquo;greppable&rsquo;, and compatible with other tools on Unix&#45;like systems.
				However, while I enjoyed using Roff, I found that my uses for it had diminished somewhat after discovering LaTeX.
				Using Roff over LaTeX when LaTeX was just as easily available at my fingertips was a bit like, in lieu of a better analogy; a sports car owner deciding to take his wife&rsquo;s family sedan to a drag strip; sure it might be fun in a while, but if you want a good performance you&rsquo;d instead take the latter.
			</p>
			<p>
				<span class="sntc">Obviously, my system isn&rsquo;t a &lsquo;real&rsquo; Roff system&mdash;I&rsquo;m using a parser I wrote myself, instead of an actual Roff system like <code>groff</code>, which is actually a system with many more layers to it than one would think, and my macro set isn&rsquo;t an &lsquo;official&rsquo; one; it just takes heavy inspiration from the &lsquo;ms&rsquo; macros and includes my own additions to make it more usable for web writing and excludes things that I don&rsquo;t have a use for just yet.</span>
				Of course, we just criticised Markdown for this very thing; not being standardised and having loads of variations, but I think it&rsquo;s a lot more acceptable with Roff, as the system is somewhat intended to be used in this manner and you don&rsquo;t create any compromises that contradict the original purposes of the format, such as plaintext readability &#40;which doesn&rsquo;t at all seem to be a goal of any Roff macro packages&#41;.
				The macros that are exclusive to my macro set can easily be recreated in a true Roff system, so it should be a reasonably trivial process to compile the source documents to other formats such as to plaintext, PDFs, etc.
				<span class="sntc">One thing I should mention in case anyone wonders, is that I actually did somewhat consider beforehand to just compile my &lsquo;.ms&rsquo; source files to webpages using <code>groff</code>&rsquo;s provided &lsquo;grohtml&rsquo; driver.</span>
				The reason I didn&rsquo;t use it however was simply due to the reduced control I had over the output.
				<span class="sntc">Not only would it be tricky to get <code>grohtml</code> to place all the necessary <code>&lt;span&gt;</code>&rsquo;s needed for the sentence&#45;spacing effect I mentioned before; I also generally just liked the fact that I could use a small program I had written myself, and have complete control over the output it produces.</span>
				Using a true Roff system here would yield essentially no benefits that I can think of, other than perhaps &lsquo;authenticity&rsquo;, which isn&rsquo;t really of concern for little webpages that barely anyone is even going to read in the first place!
			</p>
			<p>
				I&rsquo;ll also just briefly mention the technique I used to achieve the nice sentence spacing feature with my parser in case anybody was wondering.
				<span class="sntc">I discovered the method through an article posted in 2012 on the subject; <a href="https://hea-www.harvard.edu/~fine/Tech/html-sentences.html">here</a>.</span>
				It&rsquo;s an interesting read and outlines many different methods of achieving it, and comparing each method to determine the best approach at the moment.
				<span class="sntc">As I alluded to earlier, it involves separating sentences into <code>&lt;span&gt;</code>&rsquo;s within the <code>&lt;p&gt;</code> paragraph tag, and then applying certain CSS rules to both elements.</span>
				<span class="sntc">To achieve correct spacing &#40;and for it to work properly with text justification&#41;, the sentence <code>&lt;span&gt;</code>&rsquo;s need to have their <code>word&#45;spacing</code> property set to zero, and the surrounding paragraph needs to have it&rsquo;s <code>word&#45;spacing</code> set to the amount of space you want between sentences.</span>
				That&rsquo;s essentially all there is to it.
				<span class="sntc">It is a bit finnicky and possibly error&#45;prone when applying this method to raw HTML by hand, as you would need to type out <code>&lt;span class&#61;"sentence"&gt;</code> literally every time you need to separate a sentence which would probably be irritating to the point where you&rsquo;d probably forget what you&rsquo;re even writing about.</span>
				Unless of course you&rsquo;re a Vim user or something and would&rsquo;ve thought to set up some kind of mapping so that this sort of thing is all automated.
				However, with a system that takes in source files like the one I have here, it works great and produces really nice results!
			</p>
			<p>
				<span class="sntc">I&rsquo;ve made my Roff&#45;to&#45;HTML parser available on GitHub under a GPLv3 license, under the title &lsquo;<a href="https://github.com/mikejzx/broff.git">broff</a>&rsquo;, which sounded like a clever name at first, but sounds kind of stupid at the same time.</span>
				The idea was that it was meant to be a contraction of &lsquo;blog roff&rsquo; as I guess blogging is the intended purpose of it?
				Maybe it could also be for &lsquo;web roff&rsquo;, I&rsquo;ll let whoever happens to stumble across it decide.
			</p>
			<h2>
				Addendum
			</h2>
			<p>
				<span class="sntc">Not long after writing this post I discovered that there exists an additional method to achieve sentence spacing in HTML; that is to use the CSS <code>white&#45;space</code> property on text to allow consecutive spaces to be preserved.</span>
				The advantage of this approach is that it&rsquo;s just a simple CSS rule; no additional styling is needed and the HTML tags can be left alone.
				<span class="sntc">This means that it can be used to easily achieve sentence spacing with content converted from Markdown, or even with the <code>grohtml</code> web troff driver.</span>
				A disadvantage of this approach though is that you can&rsquo;t have precise control over how wide the sentence space should be; you can only adjust it in terms of the font&rsquo;s space character by adding more or less spaces after sentences.
				Another problem I noticed is that there are no suitable values for this property that both allow for whitespace preservation and collapse new&#45;lines.
				<span class="sntc">In other words, if you set e.g., <code>white&#45;space: break&#45;spaces</code> then you will need to be mindful of any linefeed characters that you include within your paragraph tags as they will all be interpreted as explicit line breaks.</span>
			</p>
			<p>
				Despite these revelations, and some of the reasons for my new system having become less just, I am still fairly happy with the system I&rsquo;m already using as outlined above, so I will continue to use it.
				<span class="sntc">Maybe one day I might have a play around with <code>grohtml</code> and decide whether it&rsquo;s worth using or not &#40;as it stands I think it does a bit <i>too much</i> for my needs&#41;.</span>
			</p>
		]]></description>
</item>
<item>
<title>Gentoo on the X205TA</title>
<guid>https://mikejzx.github.io/blog/2021/gentoo-on-the-x205ta.html</guid>
<link>https://mikejzx.github.io/blog/2021/gentoo-on-the-x205ta.html</link>
<pubDate>Thu, 14 Jan 2021 00:00:00 +1100</pubDate>
<description><![CDATA[
			<header>
				Gentoo on the X205TA
				<span style="float: right">2021-01-14</span>
			</header>
			<p>
				I&rsquo;ve had an ASUS X205TA for a few years now, and installed Lubuntu on it initially, as it was practically unusable with Windows&nbsp;10 after installing a few programs.
				Lubuntu was great and all for me while I was just starting to use to Linux more often, and it worked fine for doing schoolwork.
				Just recently I felt like it was time to do a clean install of something on there.
				I was initially thinking of going with Arch, but I figured I&rsquo;d get a bit adventurous and try something different &#40;already running Arch on two other machines&#41;.
				I thought, &ldquo;Maybe I should try out Gentoo!&rdquo;
				This was my first time installing Gentoo&mdash;it was also probably the most painful Linux install I&rsquo;ve ever put myself through!
				&#40;not because of Gentoo, but because of the device hardware&#41;.
			</p>
			<p>
				If you&rsquo;ve done any searching online for guides or helpers on installing Gentoo specifically on this laptop, you&rsquo;ve probably realised already that there&rsquo;s almost no information whatsoever.
				You can find info for other distros which doesn&rsquo;t all apply since there&rsquo;s so much manual work required in a Gentoo installation.
				<span class="sntc">There&rsquo;s one article by <a href="https://blanktar.jp/blog/2015/02/gentoo-into-eeebook">some Japanese guy</a> which when translated has some useful stuff in it.</span>
				The guy was close to getting it to work on his X205TA, but ran into the same issues that I did; kernel panics while booting, and an unusable keyboard when it actually did boot.
				After hours of tweaking with the kernel configuration, I managed to get the system to run real nicely.
				I still haven&rsquo;t run into any issues, freezes or anything, which is great!
			</p>
			<p>
				I thought I&rsquo;d write this little guide to help any of the other people pulling their hair out trying to install Gentoo on this system.
				<span class="sntc">This is not a &ldquo;full installation&rdquo; per se, but rather a set of <b>extra&#47;notable steps</b> that need to be taken on this device.</span>
				I&rsquo;d recommend having this guide on the side as you follow the official guide.
			</p>
			<p>
				Let me just warn you now&mdash;compilation of large packages on this device will usually take quite a while.
				If I were you I&rsquo;d definitely try avoiding installing any massive desktop environments, and instead take a minimal approach, with a standalone window manager, etc.
			</p>
			<p>
				Oh, and a little disclaimer: do this at your own risk.
				I&rsquo;m not at fault if you screw up your laptop!
			</p>
			<h2>
				Getting started
			</h2>
			<p>
				If you&rsquo;ve installed Linux on an X205TA before, you&rsquo;re probably already aware that the device has a 64&#45;bit CPU, and must have an exclusively 32&#45;bit bootloader &#40;if you didn&rsquo;t know that before you&rsquo;re probably wondering why this is the case; the reason is actually because ASUS are a pack of idiots&#41;.
				Gentoo&rsquo;s Live 64&#45;bit CD ISO already comes with a 32&#45;bit bootloader on it, so you&rsquo;re able to just burn it to a USB stick, plug it in, and boot right into the live environment.
			</p>
			<p>
				Wi&#45;fi should work out of the box.
				<span class="sntc">Hop into <code>wpa&#95;supplicant</code> and get yourself connected. If for whatever reason you cannot connect, try run <code>modprobe brcmfmac</code> to manually load the Wi&#45;fi module.</span>
			</p>
			<h2>
				Partitioning
			</h2>
			<p>
				The X205TA uses an eMMC as it&rsquo;s storage device &#40;basically an SD card&#41;.
				<span class="sntc">Linux identifies it as <code>&#47;dev&#47;mmcblkX</code> and its partitions as <code>&#47;dev&#47;mmcblkpXpX</code>.</span>
			</p>
			<p>
				<span class="sntc">I partitioned my drives as below using <code>parted</code>:</span>
			</p>
			<pre>
NAME          SIZE   MOUNTPOINT
mmcblk1
  mmcblk1p1   130M   &#47;boot&#47;EFI
  mmcblk1p2    29G   &#47;			</pre>
			<p>
				<span class="sntc">Since this is a UEFI system, we need to create an ESP &#40;EFI System Partition&#41;, which is <code>mmcblk1p1</code> in my case.</span>
				<span class="sntc">Make sure you also <b>set the ESP to be bootable!</b></span>
				<span class="sntc">It should have both the &rsquo;boot&rsquo; and &rsquo;esp&rsquo; flags when you run the print command in <code>parted</code>.</span>
			</p>
			<p>
				<span class="sntc">If your <code>lsblk</code> output includes a bunch of other block devices, like <code>mmcblk1boot0</code> or something, just ignore them.</span>
				I didn&rsquo;t use these at all and had no idea where they came from honestly.
				You might be able to delete them if you want &#40;though I&rsquo;m not sure if it&rsquo;ll cause problems&#41;.
			</p>
			<p>
				<span class="sntc">You can optionally create a separate <code>&#47;boot</code> partition if you want.</span>
				I decided not to do this just to keep shit simple.
			</p>
			<p>
				<span class="sntc"><b>Note</b>: the X205TA only has 2 GiB of RAM onboard.</span>
				<span class="sntc"><b>You will need some kind of swap space on the system</b> to compile some of the larger packages or else you will run out of RAM and portage will abort the compilation process &#40;happened to me twice while compiling GCC&#41;.</span>
				You can create a swap partition if you like.
				I personally created a 2 GiB swapfile, however you can use as much as you like.
			</p>
			<p>
				As for filesystems.
				The ESP must also be formatted as a FAT filesystem, so:
			</p>
			<pre>
mkfs.fat &#45;F 32 &#47;dev&#47;mmcblk1p1			</pre>
			<p>
				You can of course use EXT4 for your root partition.
			</p>
			<p>
				<span class="sntc">Make sure that you mount all the partitions and <code>swapon</code> your swap space when you chroot into the system &#40;use the method provided in the install guide&#41;.</span>
				If you&rsquo;re partitioning the same way as me, make sure you use the same mount points I specified above.
			</p>
			<h2>
				Setting up the make.conf
			</h2>
			<p>
				<span class="sntc">You should be able to get away with using <code>MAKEOPTS&#61;"&#45;j3"</code> for building most of the packages on the system &#40;be careful when compiling large packages like GCC though.</span>
				If you have too many jobs then you will end up writing a lot to swap instead of RAM which will make compilation very slow&#41;.
			</p>
			<p>
				Other things you will want to put in your make.conf:
			</p>
			<pre>
&#35; 'synaptics' is for touchpad support
INPUT&#95;DEVICES&#61;"libinput synaptics"
&#35; X205TA has Intel graphics onboard
VIDEO&#95;CARDS&#61;"intel i965"			</pre>
			<p>
				<span class="sntc">You can also add the following CPU flags to it, I generated these using <code>cpuid2cpuflags</code>. If you want to be absolutely certain that these are correct for your hardware, emerge <code>cpuid2cpuflags</code> and run it yourself.</span>
			</p>
			<pre>
CPU&#95;FLAGS&#95;X86&#61;"aes mmx mmxext pclmul popcnt rdrand sse sse2 sse3 sse4&#95;2 ssse3"			</pre>
			<p>
				Finally, and this is probably one of the most important settings; like I mentioned earlier, the X205TA has an exclusively 32&#45;bit bootloader.
				Make sure you put this in your make.conf if you want your machine to boot:
			</p>
			<pre>
GRUB&#95;PLATFORMS&#61;"efi&#45;32"			</pre>
			<h2>
				Kernel configuration
			</h2>
			<p>
				Okay.
				This is another important part; it&rsquo;s also where it gets pretty messy.
				There are a bunch of kernel options that must be included in order for your system to function properly. These should be all the important ones.
				If you think anything is missing, feel free to contact me and I&rsquo;ll correct it.
				I&rsquo;ve also probably included more options than necessary here&mdash;I don&rsquo;t really have the time to test every option individually, so I just went with whatever worked.
				If you think any of the options are completely unnecessary, just let me know and I&rsquo;ll remove it from here.
			</p>
			<p>
				<span class="sntc">If you don&rsquo;t want to configure your kernel yourself &#40;or if you can&rsquo;t get your system to work properly&#41;, you can try <a href="/files/x205ta-kernel.config.gz">using my config instead</a> &#40;no sound support&#41;, given that you are also running something around kernel 5.4.80.</span>
			</p>
			<h3>
				eMMC support
			</h3>
			<p>
				Make sure you&rsquo;ve got all of these in your config, or else you will get kernel panics at boot time.
			</p>
			<pre>
Device Drivers
  MMC&#47;SD&#47;SDIO card support
    &#60;&#42;&#62; MMC block device driver
    &#60;&#42;&#62; Secure Digital Host Controller Interface support
    &#60;&#42;&#62;   SDHCI support on PCI bus
    &#91;&#42;&#93;     Ricoh MMC Controller Disabler
    &#60;&#42;&#62;   SDHCI support for ACPI enumerated SDHCI controllers
    &#60;&#42;&#62;   SDHCI platform and OF driver helper
    &#60;&#42;&#62; MMC&#47;SD driver for Ricoh Bay1Controllers			</pre>
			<h3>
				Pin Controller
			</h3>
			<pre>
Device Drivers
  Pin controllers
    &#91;&#42;&#93; Intel Baytrail GPIO pin control
    &#91;&#42;&#93; Intel Cherryview&#47;Braswell pinctrl and GPIO driver			</pre>
			<h3>
				Wi&#45;fi
			</h3>
			<p>
				Thanks to the Japanese guy I mentioned earlier for mentioning these options.
				<span class="sntc">However we also need to include the WLAN driver so we can enable the <code>wlan0</code> interface.</span>
				&#40;Note that these are in addition to the other base options that you&rsquo;d normally use for networking&#41;.
			</p>
			<pre>
Device Drivers
  Wireless LAN
    &#91;&#42;&#93; Broadcom devices
    &#60;M&#62;   Broadcom 43xx wireless support &#40;mac80211 stack&#41;
    &#91;&#42;&#93;   Broadcom 43xx SDIO device support
    &#60;M&#62;   Broadcom FullMAC WLAN driver
    &#91;&#42;&#93;   SDIO bus interface support for FullMAC driver
Networking Support
  &#60;M&#62; cfg80211 &#45; wireless configuration API
  &#91;&#42;&#93;   enable powersave by default
  &#91;&#42;&#93;   cfg80211 wireless extensions compatibility
  &#60;M&#62; Generic IEEE 802.11 Networking Stack &#40;mac80211&#41;
  &#91;&#42;&#93; Export mac80211 internals in DebugFS			</pre>
			<h3>
				Input
			</h3>
			<p>
				The following need to be built into the kernel to get the keyboard working.
				<span class="sntc">Thanks to <a href="https://ubuntuforums.org/showthread.php?t=2254322&p=13733677#post13733677">harryharryharry over at Ubuntu forums</a> for mentioning the I2C stuff &#40;and for all of his contributions to getting Linux working on this laptop!&#41;</span>
			</p>
			<pre>
Device Drivers
  HID support
    I2C HID support
      &#60;&#42;&#62; HID over I2C transport layer
  I2C support
    I2C Hardware Bus Support
      &#60;&#42;&#62; Synopsys DesignWare Platform
      &#91;&#42;&#93;   Synopsys DesignWare Slave
      &#60;&#42;&#62; Synopsys DesignWare PCI
      &#91;&#42;&#93; Intel Baytrail I2C semaphore support
  Input device support
    &#60;M&#62; Mouse interface
    &#60;M&#62; Event interface
    &#91;&#42;&#93; Keyboards
    &#60;M&#62;   &#40;basically all keyboards&#41;
    &#91;&#42;&#93; Mice
    &#60;M&#62;   ELAN I2C Touchpad support
    &#91;&#42;&#93;     Enable I2C support
    &#91;&#42;&#93;     Enable SMbus support
    &#60;&#42;&#62;   Synaptics I2C Touchpad support			</pre>
			<h3>
				Graphics
			</h3>
			<pre>
Device Drivers
  Graphics support
    &#60;&#42;&#62; Intel 8xx&#47;9xx&#47;G3x&#47;G4x&#47;HD Graphics
    &#91;&#42;&#93; Enable capturing GPU state following a hang.
    &#91;&#42;&#93;   Compress GPU error state
    &#91;&#42;&#93; Always enable userptr support			</pre>
			<h3>
				Sound
			</h3>
			<p>
				I&rsquo;m adding this section after the original post date &#40;currently 2020&#45;01&#45;22&#41;.
				I haven&rsquo;t tried getting sound working on the 5.4 kernel, as I&rsquo;m now running the latest stable 5.10.9 kernel.
				You can try reproduce the settings below on an older kernel, I don&rsquo;t know if it&rsquo;ll work though.
			</p>
			<p>
				These should be all the options you need to get the sound working decently.
				There will be just a slight hiss in the headphone output but I&rsquo;m sure you can live with that.
				Oh, and you will also need to manually switch the output from Headphones to Speakers and vice&#45;versa, using e.g. pavucontrol.
				You could probably set up some kind of output&#45;toggle binding to speed up that process.
			</p>
			<pre>
Device Drivers
  &#60;&#42;&#62; Sound card support
    &#60;&#42;&#62; ALSA
      &#91;&#42;&#93; PCI sound devices
      &#60;M&#62; HR&#45;timer backend support
          HD&#45;Audio
          &#60;M&#62; HD Audio PCI
          &#91;&#42;&#93; Build hwdep interface for HD&#45;audio driver
          &#91;&#42;&#93; Support initialization patch loading for HD&#45;audio
          &#60;M&#62; Build Realtek HD&#45;audio codec support
          &#60;M&#62; Build Analog devices HD&#45;audio codec support
      &#40;4096&#41; Pre&#45;allocated buffer size for HD&#45;audio driver
      &#60;&#42;&#62; ALSA for SoC audio support
        &#91;&#42;&#93; Intel ASoC SST drivers
        &#60;&#42;&#62;   ACPI HiFi2 &#40;Baytrail, Cherrytrail&#41; Platforms
        &#45;&#42;&#45; Intel Machine Drivers
          &#60;M&#62; &#40;everything&#41;
        &#91;&#42;&#93; Sound Open Firmware Support
          &#60;&#42;&#62; SOF ACPI enumeration support.
          &#91;&#42;&#93; SOF support for Intel audio DSPs
        &#60;M&#62; ASoC Simple sound card support			</pre>
			<p>
				I have no idea if the microphone will work with these options.
				I don&rsquo;t really care since I don&rsquo;t use the microphone.
			</p>
			<p>
				And from here all the other kernel options &#40;USB support, etc&#41; should be pretty generic and obvious.
			</p>
			<h3>
				Kernel patches
			</h3>
			<p>
				<span class="sntc">If you want to squeeze as much performance as possible out of your X205TA, you can apply the <a href="http://ck.kolivas.org/patches">linux&#45;ck performance patches</a> to your kernel.</span>
				I&rsquo;m running this personally and it seems to just make the system feel a bit snappier overall.
			</p>
			<h2>
				GRUB installation
			</h2>
			<p>
				To install GRUB we have to run these two commands.
				<span class="sntc">Make sure you <b>do not</b> include a partition number in the <code>grub&#45;install</code> command &#40;e.g. <b>don&rsquo;t use</b> <code>mmcblk1pX</code>&#41; or else your laptop won&rsquo;t boot &#40;at least in my testing&#41;.</span>
				<span class="sntc">As long as the <code>&#47;boot&#47;EFI</code> directory exists &#40;and you&rsquo;ve formatted partitions the same as me&#41;, the below commands will install the bootloader just fine.</span>
			</p>
			<pre>
grub&#45;install &#45;&#45;target&#61;i386&#45;efi &#47;dev&#47;mmcblk1
grub&#45;mkconfig &#45;o &#47;boot&#47;grub&#47;grub.cfg			</pre>
			<p>
				<span class="sntc">Your bootloader should now appear in <code>&#47;boot&#47;EFI&#47;EFI&#47;gentoo</code>. It probably looks weird with the two EFI directories, but it seems to work perfectly like this.</span>
			</p>
			<p>
				I also created an initramfs.
				I&rsquo;d say you should probably install one of these too on your machine:
			</p>
			<pre>
genkernel &#45;&#45;install &#45;&#45;kernel&#45;config&#61;&#47;usr&#47;src&#47;linux&#47;.config initramfs			</pre>
			<h2>
				Finishing up
			</h2>
			<p>
				And that&rsquo;s about it!
				If all went well&mdash;you followed the official install Gentoo instructions and applied the stuff from this guide, you should hopefully be able to unmount everything, reboot, and boot into a fresh Gentoo installation on your X205TA!
				You&rsquo;re on your own from here to decide how the rest of your system will be laid out.
			</p>
			<p>
				<span class="sntc">If you have any questions, comments, or problems with the information here, please feel free to e&#45;mail me via the address on my <a href="https://mikejzx.github.io">homepage</a>.</span>
			</p>
			<p>
				Have fun waiting for all your packages to compile ;&#41;
			</p>
		]]></description>
</item>
<item>
<title>On Web Browsers</title>
<guid>https://mikejzx.github.io/blog/2020/on-web-browsers.html</guid>
<link>https://mikejzx.github.io/blog/2020/on-web-browsers.html</link>
<pubDate>Sat, 12 Dec 2020 00:00:00 +1100</pubDate>
<description><![CDATA[
			<header>
				On Web Browsers
				<span style="float: right">2020-12-12</span>
			</header>
			<p>
				In the current day and age, there are only two main browsers that you will find on the desktop: Chromium and Firefox.
				We&rsquo;ll ignore Safari because nobody cares about Apple.
				According to StatCounter as of November 2020, Chrome has nearly 70&#37; of the web browser market share on desktop.
				Add in Edge&rsquo;s 8&#37; and Opera&rsquo;s 2&#37; and you can say that about 80&#37; of desktop web browsers are Chromium&#45;based.
			</p>
			<p>
				On that note, it seems like few people these days &#40;i.e. normies&#41; are aware that Chrome is a proprietary fork of the open&#45;source Chromium browser.
				I mean, if you seriously have to use Chrome, at least switch to Chromium, or better, one of it&rsquo;s decent free and open&#45;source forks: &lsquo;ungoogled&#45;chromium&rsquo;, Brave, Bromite, Iridium, etc.
				Nevertheless, that&rsquo;s a whole other topic.
			</p>
			<p>
				What I actually wanted to discuss here is the lack of choice in web browsers we have right now.
				If you&rsquo;re not using a Chromium&#45;based browser, you&rsquo;re most likely going to be using Mozilla&rsquo;s Firefox.
				&#40;Yes, I know there are small free and open&#45;source alternatives, like suckless&rsquo;s &lsquo;surf&rsquo; browser, &lsquo;qutebrowser&rsquo;, etc., but these are mostly used by and intended for power users&#47;nerds running Unix&#45;like operating systems, rather than average users&#41;.
			</p>
			<p>
				The thing is, Firefox is slowly turning to shit.
				I&rsquo;ve been using it for a few years now and was initially reasonably happy with it.
				I mean, it took some configuring to get it to behave how I wanted &#40;no history, delete cookies, and some other &ldquo;hardening&rdquo;&#41;.
				Nevertheless, I&rsquo;ve noticed that as the years go by, Firefox just seems to get worse and worse.
				I really don&rsquo;t know what the hell is going on over there at Mozilla, but adding useless features that nobody uses, like Pocket, and forcing a stupid expanding URL bar that nobody asked for is just a few of the many things that are slowly turning our browser into rubbish.
				You&rsquo;ll find many people complaining online about how a feature they liked was removed, or how they can&rsquo;t stand a new feature.
				These people will either get told to &ldquo;deal with it&rdquo;, or perform some ridiculous workaround that wouldn&rsquo;t be necessary if Mozilla had focused their effort on actually making the browser better.
			</p>
			<p>
				<span class="sntc">And the funniest part is simply that Firefox is a <b>free and open&#45;source browser</b>.</span>
				One of the few criterion for a piece of software to be free and open&#45;source is the ability for anyone to come along and modify its source code.
				There&rsquo;s almost a joke online regarding FOSS projects&mdash;when someone says they don&rsquo;t like a particular feature in a piece of open&#45;source software, they&rsquo;ll get told, &ldquo;fork it&rdquo;.
			</p>
			<p>
				<span class="sntc">Now here is the problem, and it&rsquo;s a big one; 99&#37; of the people who look at the source code of a large web browser will be <b>unable to modify it</b>, to fix the problems in the browser.</span>
				There&rsquo;s only so many people who are willing to put the work and dedication into understanding any of a huge web browser&rsquo;s source code.
				You&rsquo;re not going to have many hobbyists coming along and fixing the problems with Firefox just out of goodwill in their free time.
			</p>
			<p>
				I should add; I am aware of Alex Kontos &#40;a.k.a. MrAlex94&#41; and his browser Waterfox, and I actually used Waterfox for most of this year.
				<span class="sntc">Sure, he&rsquo;s done some excellent work removing Pocket &#40;thank god&#41;, telemetry, and bringing back the old plugin system, but apart from that, I feel like the browser is still <b>too similar</b> to Firefox.</span>
				I wish that the browser would go off more on it&rsquo;s own path and do it&rsquo;s own thing.
				But of course, I can&rsquo;t blame the dude, for reasons that I&rsquo;m going to get to.
				I&rsquo;d imagine that him being mostly a one&#45;man&#45;army would make it incredibly difficult to do something like that too.
			</p>
			<p>
				And so, the only two big browsers that are still alive today on the desktop, Chromium and Firefox, simply managed to survive today because they have companies backing them paying people to work on them.
				These browsers are continually getting bigger, bigger, and bigger, and it has just about gotten to the point where writing a new web browser from scratch which can compete with Chromium and Firefox would demand an insane amount of resources.
			</p>
			<p>
				So you might be asking yourself.
				Well, what do we do?
				Unfortunately, I don&rsquo;t have an answer to that.
				But I can tell you why we&rsquo;re in this ridiculous situation:
			</p>
			<p>
				The web itself has become an absolute mess.
			</p>
			<p>
				Think about it.
				The reason why our browsers are so gigantic, is because of the current state of the web.
				We need a massive CSS engine to let developers make sites look pretty.
				We need an equally massive JavaScript engine to implement the entire JavaScript standard.
				We need to support all these WebSockets, other APIs, and so on.
				In the end, after 10&#45;20 years of all of this crap being thrown into web browsers, you get the big, bloated, web browsers we have today that hog 8&#43; processes, and a few gigs of RAM.
			</p>
			<p>
				<span class="sntc">The problem is that we&rsquo;ve made <b>too much</b> possible for web developers.</span>
				There&rsquo;s a bit of a continuum actually, either:
			</p>
			<ul>
			<li>
				You give web developers the ability to do practically anything they want &#40;as is the case currently&#41;, through loads of CSS rules, and JavaScript.
				This results in our current situation of little web browser variety, and massive bloat.
			</li>
			<li>
				Alternatively, you restrict the amount of control that web developers have over their page, through some simple standard.
				Provided that this standard is simple enough, our current situation is mitigated, as practically any average Joe can come along and write his own simple &ldquo;web browser&rdquo; if he wants.
			</li>
			</ul>
			<p>
				So again; you&rsquo;re probably asking, &ldquo;What do we do?
				We already let the web get as complicated as it is,&rdquo; and you&rsquo;d be right.
				I really can&rsquo;t answer the question of what we are supposed to do to fix this.
				However I&rsquo;ll mention that there has actually been some effort to address these issues.
				<span class="sntc">One such project I came across recently is <a href="https://gemini.circumlunar.space">Project Gemini</a> which honestly while minimal, isn&rsquo;t that bad.</span>
				It&rsquo;s supposed to be heavier than Gopher, less complicated than the web, and not a replacement for either of them.
				<span class="sntc">So like I said earlier, having a simple standard inevitably makes it easier to create browsers, which is shown in how there are currently eight Gemini clients listed on <a href="https://gemini.circumlunar.space/clients.html">this page</a>&mdash;impressive considering how small Gemini currently is.</span>
			</p>
			<p>
				<span class="sntc">I&rsquo;m not saying that Gemini is the solution to our problem, because it is <b>very minimal</b>, being mostly text&#45;based, and I personally think it&rsquo;s impractical for <b>normal users</b> who are coming from the current web.</span>
				They would feel like they&rsquo;re getting a downgrade, not being able to view videos or listen to music in their browser, not being able to share images practically with their friends, etc.
				I personally don&rsquo;t think that pure text alone is the way to go.
				Some styling is nice to have to at least make your site look somewhat pleasing to the eye.
			</p>
			<p>
				I mean, I&rsquo;m sure there&rsquo;s some UNIX extremist reading this thinking, &ldquo;Do one thing and do it well!&rdquo; and suggesting that we all for example, download videos through our minimal Gemini browsers to view them in some external purpose&#45;built video player software, or that we all only chat with people using software designed for it, like IRC clients or whatever.
				Again, this is seriously impractical for normal people who aren&rsquo;t already into all that sort of stuff &#40;i.e. basically people who use Windows or Mac&#41;.
			</p>
			<p>
				Nevertheless.
				A bit of a rant, but I guess something to think about as our web continues to become more and more bloated as it inevitably will in the years to come.
			</p>
		]]></description>
</item>
<item>
<title>Switching to Arch</title>
<guid>https://mikejzx.github.io/blog/2020/switching-to-arch.html</guid>
<link>https://mikejzx.github.io/blog/2020/switching-to-arch.html</link>
<pubDate>Fri, 04 Dec 2020 00:00:00 +1100</pubDate>
<description><![CDATA[
			<header>
				Switching to Arch
				<span style="float: right">2020-12-04</span>
			</header>
			<p>
				Around this time last year &#40;a bit earlier actually&mdash;October or so&#41;, I decided to make the switch to using a Linux distribution as my daily driver &#40;while also dual&#45;booting Windows&#41;.
				Just like everyone else, I distrohopped until I found the distro that I felt was &ldquo;just right&rdquo;.
				I settled on Xubuntu&mdash;a nice flavour of Ubuntu that runs the good ol&rsquo; XFCE4 desktop environment.
				It just seemed like a nice, fairly snappy operating system.
				Below is a screenshot of what my system looked like from about April to around last week: 
			</p>
			<img src="/files/img/2020-04-28_xfce.webp" alt="Riced XFCE desktop"/>
			<p>
				It looked nice and all for a while, but recently I was getting sick of it.
				I decided it was time to change it up a bit; I decided to try out Arch
			</p>
			<p>
				I had used Arch Linux for the past year or so on an old laptop of mine &#40;this same laptop is where I had installed Ubuntu for the first time years ago!&#41;.
				I had played around with Arch occasionally, and I thought it seemed like a really cool and extensible distribution.
				I felt like I had loads more flexibility, and that I knew the system better because I had installed everything on it myself from the ground&#45;up.
			</p>
			<p>
				So, last weekend I got my desktop prepared for a new install of Arch &#40;cleaned up file&#47;directory structure&#41; and put the ISO on a trusty USB.
				I went ahead with the install&mdash;it took me two attempts &lsquo;till I got a functioning system.
				It seemed like the latest 5.9 kernel just doesn&rsquo;t like my hardware or something.
				The second time around I went with the LTS kernel, and all went well.
			</p>
			<p>
				I booted into my new system, and installed whatever essential packages I needed &#40;i.e. Neovim, etc&#41;.
				I had decided beforehand that I&rsquo;d go with Openbox as my window manager, so that&rsquo;s what I installed and ran initially.
				I had played around with it, got the basic things configured.
				<span class="sntc">However, I soon discovered that Openbox does not have the ability to &ldquo;hide window contents while dragging windows&rdquo; &#40;see <a href="http://www.lxle.net/forums/discussion/778/hide-window-content-while-dragging/p1">here</a>, things haven&rsquo;t changed since then apparently&#41;.</span>
				It&rsquo;s a really small feature, but something I really wanted to have, as it just makes the system feel a lot snappier.
				<span class="sntc">Nevertheless, I discovered quickly that the <b>Fluxbox</b> window manager actually supports this feature.</span>
				I had basically never used Fluxbox before &#40;maybe once or twice as a test&#41;, but decided to give it a shot anyway.
				And boy, I&rsquo;m glad I did!
				Fluxbox&rsquo;s man pages are pretty comprehensive &#40;thankfully, as there isn&rsquo;t much online resources unfortunately&#41;, so I was able to get it configured fairly quickly.
				I was very impressed with how customisable and simple Fluxbox actually is.
				It was basically just what I had been looking for.
				I was able to adjust it to suit my workflow, using some keybinds such as the following:
			</p>
			<pre>
&#35; Close window
Mod4 Q :Close
&#35; Make window fullscreen
Mod1 F11 :Fullscreen
&#35; Tile window vertically to the left&#47;right.
Mod4 Left :MacroCmd &#123;ResizeTo 50&#37; 100&#37;&#125; &#123;MoveTo 0&#37; 0&#37; TopLeft&#125;
Mod4 Right :MacroCmd &#123;ResizeTo 50&#37; 100&#37;&#125; &#123;MoveTo 0&#37; 0&#37; TopRight&#125;
&#35; Maximise window
Mod4 Up :Maximize
&#35; Restore window if maximised, minimise it if restored.
&#35; The call to 'Maximize' here is a hack that is used to actually
&#35; 'Restore' the maximised window, since there doesn't seem to be
&#35; any 'Restore' command &#40;at least not in the build of Fluxbox
&#35; that is in the Arch repos&#41;.
Mod4 Down :If &#123;Matches &#40;Maximized&#61;yes&#41;&#125; &#123;Maximize&#125; &#123;Minimize&#125;
&#35; Launch script that moves window to other monitor:
&#35; See my dotfiles for the script, I can't find the original author:
&#35; https:&#47;&#47;github.com&#47;mikejzx&#47;dotfiles
Mod1 Shift N :Exec &#36;HOME&#47;src&#47;scripts&#47;misc&#47;move&#45;to&#45;next&#45;monitor.sh
&#35; A pretty cool command that tiles windows in master&#47;slave format.
Mod4 A :If &#123;Matches &#40;Layer!&#61;Desktop&#41;&#125; &#123;ArrangeWindowsStackRight &#40;Name!&#61;tint2&#41;&#125;
&#35; Launch Rofi to search for programs.
Mod4 S :Exec rofi &#45;show combi &#45;combi&#45;modi "drun,run" &#45;modi combi			</pre>
			<p>
				Those are the main window management keybinds that I&rsquo;m using, and they get the job done great.
				I haven&rsquo;t tinkered with workspaces yet, since they seem a bit awkward to use on a dual&#45;monitor setup with a floating window manager.
				Maybe in future I&rsquo;ll try work something out.
			</p>
			<p>
				After getting Fluxbox &#40;and everything else on the system&#41; configured, it was time to theme the damn thing!
				I had initially been using the &rsquo;bloe&rsquo; theme that came with Fluxbox, since I thought it actually looked decent, and sort of retro&#45;ey.
				Thing is, I just wanted a dark version of it!
			</p>
			<p>
				Well, I decided to go ahead and make my own dark version of it.
				I mean, it took some tweaking, but eventually I was able to get something that I was actually pleased with.
				I only ended up editing the pixmaps that I was actually using, so that is&mdash;close&#47;restore&#47;minimise buttons, window titlebars, etc.
			</p>
			<p>
				I had to find a GTK theme that went well the Fluxbox theme.
				Man, it was a pain in the ass, but I did eventually discover a theme called &lsquo;Vertex&rsquo;, which I think worked well with it.
				I did just slightly modify the colours of the toolbar&#47;window menus of GTK2 windows, and also removed all &rsquo;transitions&rsquo; that I could find&mdash;since I don&rsquo;t like them very much.
			</p>
			<p>
				Finally, I had to get my panel configured.
				I had installed Tint2 pretty early on, while I was experimenting with Openbox, and yeah it&rsquo;s pretty awesome.
				I was able to configure it pretty much just how I wanted.
				The other day I even put this crazy gradient on it, which when paired with a blur effect &#40;thanks to Tryone144&rsquo;s fork of the Picom compositor&#41;, made it look a bit like the Windows Vista taskbar.
				I mean, I wasn&rsquo;t trying to mimick it really, but I think it goes quite well with the rest of the theme.
				I guess it can be considered a bit of a &ldquo;retro&rdquo; look now, since interfaces haven&rsquo;t had that sort of thing in years.
				Here&rsquo;s the gradient I used to achieve it:
			</p>
			<pre>
gradient &#61; vertical
start&#95;color &#61; &#35;404040 55
color&#95;stop &#61; 50.000000 &#35;4a4a4a 55
color&#95;stop &#61; 52.000000 &#35;0c0c0c 30
color&#95;stop &#61; 93.000000 &#35;0a0a0a 30
color&#95;stop &#61; 94.000000 &#35;ffffff 10
color&#95;stop &#61; 96.000000 &#35;ffffff 10
color&#95;stop &#61; 98.000000 &#35;000000 100
end&#95;color &#61; &#35;000000 100			</pre>
			<p>
				And here&rsquo;s the resulting desktop.
				A bit of a throwback to the late 2000s days of computing I guess.
				It definitely won&rsquo;t suit everyone&rsquo;s tastes, but it suits mine!
				
			</p>
			<img src="/files/img/2020-12-04_arch_main.webp" alt="Arch desktop screenshot"/>
			<p>
				Oh, and I just thought this was really cool too&mdash;this is from the Tint2 panel on my left monitor.
				Got a nice MPD status display there with a play&#47;pause icon!
				Of course clicking it also runs &lsquo;mpc toggle&lsquo;.
				
			</p>
			<img src="/files/img/2020-12-04_arch_left.webp" alt="tint2 on the other monitor"/>
		]]></description>
</item>
</channel>
</rss>
